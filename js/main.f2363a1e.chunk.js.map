{"version":3,"sources":["components/results/result.js","components/icons/search.js","components/text-search/no-autocomplete.js","helpers/index.js","components/text-search/search-as-you-type.js","components/text-search/index.js","components/list-facet/index.js","components/range-facet/index.js","components/search-field-container.js","components/results/list.js","components/icons/chevrons.js","components/results/pagination.js","components/results/count-label.js","components/current-query/index.js","components/sort-menu/index.js","components/federated_solr_component_pack.js","components/federated-solr-faceted-search.js","index.js"],"names":["FederatedResult","field","doc","concat","filter","v","join","date","Intl","DateTimeFormat","year","month","day","format","Date","parse","hostname","this","props","Object","hasOwnProperty","call","ss_canonical_url","Array","isArray","sm_urls","currentHostUrl","find","item","url","ss_url","arr","sep","length","slice","reduce","xs","x","i","sitenames","urls","originalSitename","sites","push","className","href","key","intersperse","highlight","onClick","onSelect","ss_federated_image","src","alt","ss_federated_type","getCanonicalLink","dangerouslySetInnerHTML","__html","ss_federated_title","renderSitenameLinks","sm_site_name","ss_site_name","dateFormat","ds_federated_date","tm_rendered_item","React","Component","Search","xmlns","viewBox","d","FederatedTextSearchNoAutocomplete","state","value","handleInputChange","bind","handleInputKeyDown","handleSubmit","nextProps","setState","ev","target","keyCode","onChange","parsed","queryString","window","location","search","stringified","stringify","history","pushState","newUrl","protocol","host","pathname","path","label","Fragment","htmlFor","type","name","id","autoFocus","onKeyDown","defaultProps","filterFieldsWithQsState","qs","getParsedQsAndParams","arrayFormat","params","entries","getFieldQsInfo","values","foundIdx","indexOf","isQsParamField","param","addValueToQsParam","newParsed","includes","addQsParam","fieldType","split","isMultiple","charAt","removeValueFromQsParam","addNewUrlToBrowserHistory","newurl","setFieldStateFromQs","searchField","newSearchField","collapse","decodeURI","expandedHierarchies","forEach","decodedParam","map","highlightText","text","toString","trim","parts","RegExp","part","style","toLowerCase","fontWeight","FederatedTextSearchAsYouType","suggestions","reset","getSuggestionValue","loadSuggestions","onSuggestionSelected","onSuggestionsFetchRequested","onSuggestionsClearRequested","renderSuggestion","renderSuggestionsContainer","shouldRenderSuggestions","active","suggestQuery","docs","event","newValue","method","suggestion","autocomplete","mode","preventDefault","stopPropagation","assign","onSuggest","query","defaultPrevented","numChars","containerProps","children","hasResultModeConfig","hasTermModeConfig","resultTitleText","result","titleText","resultShowDirectionsText","showDirectionsText","termTitleText","term","termShowDirectionsText","directionsText","suggestionsWrapperClasses","decodedTitle","he","decode","highlightedTitle","helpers","currentHumanIndex","suggestionsLength","inputProps","role","focusInputOnSuggestionClick","renderInputComponent","FederatedTextSearch","InputComponent","FederatedListFacet","truncateFacetListsAt","hierarchyFacetValue","onSetCollapse","indexOfExpandedHierarchyFacetValue","splice","facets","hierarchy","options","siteList","facetCounts","facet","facetValues","facetInputs","keys","expanded","height","types","terms","facetValue","pieces","items","facetCount","uniqueTypes","self","String","listFacetHierarchyLis","listFacetHierarchyTermsLis","termObj","checked","handleClick","tabIndex","cx","replace","toggleExpand","duration","FederatedRangeFacet","startDate","endDate","focusedInput","momentToSolrStart","moment","subtract","hours","momentToSolrEnd","add","minutes","seconds","calendarOrientation","undefined","calendarFullScreen","calendarMonths","getLastMonth","matchMedia","matches","startDateId","endDateId","onDatesChange","handleDatesChange","onFocusChange","isOutsideRange","today","diff","isBefore","minimumNights","small","showClearDates","onClose","handleCalendarClose","phrases","calendarLabel","chooseAvailableStartDate","chooseAvailableEndDate","clearDates","closeDatePicker","dateIsSelected","dateIsUnavailable","enterKey","escape","focusStartDate","hideKeyboardShortcutsPanel","homeEnd","jumpToNextMonth","jumpToPrevMonth","keyboardNavigationInstructions","keyboardShortcuts","leftArrowRightArrow","moveFocusByOneDay","moveFocusByOneMonth","moveFocusByOneWeek","moveFocustoStartAndEndOfWeek","openThisPanel","pageUpPageDown","questionMark","returnFocusToInput","selectFocusedDate","showKeyboardShortcutsPanel","upArrowDownArrow","initialVisibleMonth","numberOfMonths","orientation","withFullScreenPortal","FederatedSearchFieldContainer","intFrameWidth","innerWidth","addEventListener","onNewSearch","aria-labelledby","resultsCount","FederatedResultList","DoubleChevronLeft","ChevronLeft","ChevronRight","DoubleChevronRight","FederatedPagination","buildHandleEnterKeyPress","page","pageAmt","document","getElementById","focus","preventScroll","currentPage","isCurrentPage","onPageChange","onKeyPress","title","aria-current","results","start","rows","numFound","Math","ceil","numButtons","paginationButtons","rangeStart","rangeEnd","pages","firstPageHidden","prevPageHidden","nextPageHidden","lastPageHidden","aria-hidden","rel","idx","renderPage","FederatedCountLabel","noResultsText","termValue","message","a11yMessage","aria-live","searchResultsStat","FacetType","ListFacetType","announcePolite","val","removeListFacetValue","RangeFacetType","utc","startFormatted","end","endFormatted","filterValue","removeRangeFacetValue","TextFacetType","removeTextValue","FederatedCurrentQuery","fields","searchFields","facetTypes","isHidden","MyFacetType","FederatedSortMenu","sort","sortField","sortFields","FederatedSolrComponentPack","defaultComponentPack","container","currentQuery","list","paginate","resultCount","menu","FederatedSolrFacetedSearch","resetFilters","searchTerm","mainQueryField","onSearchFieldChange","pageTitle","customComponents","bootstrapCss","onTextInputChange","onSortFieldChange","SearchFieldContainerComponent","ResultContainerComponent","ResultComponent","ResultCount","ResultHeaderComponent","header","ResultListComponent","ResultPendingComponent","pending","PaginateComponent","PreloadComponent","preloadIndicator","CurrentQueryComponent","SortComponent","resultPending","pagination","pageStrategy","preloadListItem","sidebarFilters","lowerBound","upperBound","SearchComponent","getFacetValues","autoComplete","sf","showEmptySearchResults","searchPrompt","noResults","onSelectDoc","resultIndex","highlighting","showCsvExport","searchFromQuerystring","solrClient","searchFieldsState","prototype","filterField","siteSearch","sendQuery","root","dataset","settings","defaults","isD7","proxyIsDisabled","hl","fl","usePhraseHighlighter","hiddenSearchFields","sm_site_name_value","SolrClient","userpass","filters","handlers","ReactDOM","render","onpopstate","init","JSON","federatedSearchAppConfig","console","error"],"mappings":"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","file":"static/js/main.f2363a1e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from \"react\";\nimport 'intl';\nimport 'intl/locale-data/jsonp/en';\nimport url from 'url';\n\n// Custom class for the result component\nclass FederatedResult extends React.Component {\n  renderValue(field, doc) {\n    const value = [].concat(doc[field] || null).filter((v) => v !== null);\n\n    return value.join(\", \");\n  }\n\n  dateFormat(date){\n    if (typeof date !== 'undefined') {\n      const prettyDate =  new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      }).format(Date.parse(date));\n      const separator = \"  ·  \";\n      return separator + prettyDate;\n    }\n  }\n\n  /**\n   * Returns the appropriate link for a given search result.\n   * 1. Use the canonical url if present.\n   * 2. Next, attempt to find a url from the current host.\n   * 3. Then, use the first url returned in the array of urls.\n   * 4. Fall back to the legacy url field.\n   * 5. Send an empty string if none of these options work.\n   *\n   * @param doc\n   *   Search result object\n   * @returns string\n   */\n  getCanonicalLink(doc) {\n    const { hostname } = this.props;\n\n    // 1. Use the canonical url as a first option\n    if (Object.hasOwnProperty.call(doc, 'ss_canonical_url') && doc.ss_canonical_url) {\n      return doc.ss_canonical_url;\n    }\n\n    // Use a url from the current host, if present.  Otherwise use the first Url.\n    if (Object.hasOwnProperty.call(doc, 'sm_urls') && Array.isArray(doc.sm_urls)) {\n      // Attempt to find a url from the current host.\n      const currentHostUrl = doc.sm_urls.find((item) => {\n        const myUrl = url.parse(item);\n        return myUrl.hostname === hostname;\n      });\n\n      // 2. Use the url from the current host.\n      if (currentHostUrl) {\n        return currentHostUrl;\n      }\n\n      // 3. Use the first url.\n      return doc.sm_urls[0];\n    }\n\n    // 4. Fall back to the single url (which will be relative)\n    if (Object.hasOwnProperty.call(doc, 'ss_url') && doc.ss_url) {\n      return doc.ss_url;\n    }\n\n    // 5. If no valid urls are passed, return nothing. This will result in an\n    // unlinked title, but at least it won't crash.\n    return '';\n  }\n\n  intersperse(arr, sep) {\n    if (arr.length === 0) {\n      return [];\n    }\n\n    return arr.slice(1).reduce(function(xs, x, i) {\n      return xs.concat([sep, x]);\n    }, [arr[0]]);\n  }\n\n  renderSitenameLinks(sitenames, urls, originalSitename) {\n    if (sitenames != null && urls != null) {\n\n      var sites = [];\n      for (var i = 0; i < sitenames.length; i++) {\n        sites.push(<a className=\"fs-search-results__site-name\" href={urls[i]} key={i}>{sitenames[i]}</a>);\n        if (i !== (sitenames.length - 1)) {\n\n        }\n      }\n      return this.intersperse(sites, \" | \");\n    }\n\n    if (originalSitename != null) {\n      return originalSitename;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { doc, highlight } = this.props;\n\n    return (\n      <li className=\"fs-search-results__item\" onClick={() => this.props.onSelect(doc)}>\n        {doc.ss_federated_image &&\n        <div className=\"fs-search-results__container--left\">\n          <img className=\"fs-search-results__image\" src={doc.ss_federated_image} alt=\"\"/>\n        </div>\n        }\n        <div className=\"fs-search-results__container--right\">\n          <span className=\"fs-search-results__label\">{doc.ss_federated_type}</span>\n          <h3 className=\"fs-search-results__heading\"><a href={this.getCanonicalLink(doc)} dangerouslySetInnerHTML={{__html: doc.ss_federated_title}} /></h3>\n          <div className=\"fs-search-results__meta\">\n            <cite className=\"fs-search-results__citation\">{this.renderSitenameLinks(doc.sm_site_name, doc.sm_urls, doc.ss_site_name)}</cite>\n            <span className=\"fs-search-results__date\">{this.dateFormat(doc.ds_federated_date)}</span>\n          </div>\n          <p className=\"fs-search-results__teaser\" dangerouslySetInnerHTML={{__html: highlight.tm_rendered_item}} />\n        </div>\n      </li>\n    )\n  }\n}\n\nFederatedResult.propTypes = {\n  doc: PropTypes.object,\n  fields: PropTypes.array,\n  onSelect: PropTypes.func.isRequired,\n    hostname: PropTypes.string,\n};\n\nexport default FederatedResult;\n","import React from \"react\";\n\nclass Search extends React.Component {\n\trender() {\n\t\treturn (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M17.545 15.467l-3.779-3.779a6.15 6.15 0 0 0 .898-3.21c0-3.417-2.961-6.377-6.378-6.377A6.185 6.185 0 0 0 2.1 8.287c0 3.416 2.961 6.377 6.377 6.377a6.15 6.15 0 0 0 3.115-.844l3.799 3.801a.953.953 0 0 0 1.346 0l.943-.943c.371-.371.236-.84-.135-1.211zM4.004 8.287a4.282 4.282 0 0 1 4.282-4.283c2.366 0 4.474 2.107 4.474 4.474a4.284 4.284 0 0 1-4.283 4.283c-2.366-.001-4.473-2.109-4.473-4.474z\"/></svg>\n\t\t);\n\t}\n}\n\nexport default Search;","import PropTypes from 'prop-types';\nimport queryString from 'query-string';\nimport React from 'react';\nimport SearchIcon from '../icons/search';\n\n// Renders plain text input and submit button for text search.\n// Rendered when env config autocomplete is not present or set to false.\n// @see /env.local.js.example\nclass FederatedTextSearchNoAutocomplete extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this.setState({\n      value: nextProps.value,\n    });\n  }\n\n  handleInputChange(ev) {\n    this.setState({\n      value: ev.target.value,\n    });\n  }\n\n  handleInputKeyDown(ev) {\n    if (ev.keyCode === 13) {\n      this.handleSubmit();\n    }\n  }\n\n  handleSubmit() {\n    this.props.onChange(this.props.field, this.state.value);\n    // Get existing querystring params.\n    const parsed = queryString.parse(window.location.search);\n    // Update the search querystring param with the value from the search field.\n    parsed.search = this.state.value;\n    const stringified = queryString.stringify(parsed);\n    // Update the querystring params in the browser, add path to history.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method\n    if (window.history.pushState) {\n      const newUrl = `${window.location.protocol}//${window.location.host}${window.location.pathname}?${stringified}`;\n      window.history.pushState({ path: newUrl }, '', newUrl);\n    } else {\n      window.location.search = stringified;\n    }\n  }\n\n  render() {\n    const { label } = this.props;\n\n    return (\n      <React.Fragment>\n        <label htmlFor=\"search\" className=\"fs-search-form__label\">{label}</label>\n        <div className=\"fs-search-form__input-wrapper\">\n          <input\n            type=\"search\"\n            name=\"search\"\n            id=\"search\"\n            className=\"fs-search-form__input\"\n            autoFocus\n            onChange={this.handleInputChange}\n            onKeyDown={this.handleInputKeyDown}\n            value={this.state.value || ''}\n          />\n          <button\n            type=\"submit\"\n            className=\"fs-search-form__submit\"\n            onClick={this.handleSubmit}>\n            <span className=\"fs-element-invisible\">Perform Search</span>\n            <SearchIcon />\n          </button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nFederatedTextSearchNoAutocomplete.defaultProps = {\n  label: '',\n  onChange: () => {},\n  value: '',\n};\n\nFederatedTextSearchNoAutocomplete.propTypes = {\n  field: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n};\n\nexport default FederatedTextSearchNoAutocomplete;\n","import React from 'react';\nimport queryString from 'query-string';\n\n/**\n * Find and highlight relevant keywords within a block of text\n * @param  {string} text - The text to parse\n * @param  {string} highlight - The search keyword/partial to highlight\n * @return {object} A JSX object containing an array of alternating strings and JSX\n */\nconst highlightText = (text, highlight) => {\n  if (!highlight.toString().trim()) {\n    return <span>{text}</span>;\n  }\n  // Split on highlight term and include term into parts, ignore case\n  const parts = text.split(new RegExp(`(${highlight})`, 'gi'));\n  return (\n    <span> { parts.map((part, i) =>\n      (\n        <span key={i} style={part.toLowerCase() === highlight.toString().toLowerCase() ? { fontWeight: 'bold' } : {}}>\n          { part }\n        </span>\n      ))}\n    </span>);\n};\n\n// Those filter fields for which we want to preserve state in qs.\nconst filterFieldsWithQsState = [\n  'sm_site_name',\n  'ss_federated_type',\n  'sm_federated_terms',\n];\n\nconst qs = {\n  /**\n   * Gets the qs params as an object and broken into array of [key,value] pairs.\n   * Params with multiple values (i.e. federated terms) use the following syntax:\n   * ...&sm_federated_terms[]=value1&sm_federated_terms[]=value2\n   *\n   * @returns {{parsed: (*|*|*), params: [string, any][]}}\n   */\n  getParsedQsAndParams: () => {\n    const parsed = queryString.parse(window.location.search, { arrayFormat: 'bracket' });\n    return {\n      parsed,\n      params: Object.entries(parsed),\n    };\n  },\n  /**\n   * Determines information related this search field, its value, and state.\n   *\n   * @param field\n   *   this.props.query.searchField.field (i.e. the solr field name)\n   * @param values\n   *   this.props.query.searchField.value (i.e. the current value for the field)\n   * @param value\n   *   The value of the field with which interaction has happened.\n   * @returns object\n   *   An object with:\n   *     foundIdx: the position of the field value in question found in this field's state,\n   *     parsed: an object with parsed qs params and their values,\n   *     isQsParamField: whether or not the field in question should track state in the qs,\n   *     param: an object with the as param and value for this field, if it exists\n   */\n  getFieldQsInfo: ({ field, values, value }) => {\n    // Determine if the field value in question exists in this search field's state.\n    // i.e. was it toggled on or off?\n    const foundIdx = values.indexOf(value);\n    // Get existing querystring params.\n    const { parsed, params } = qs.getParsedQsAndParams();\n\n    // Check if the search field is one for which we preserve state through qs.\n    const isQsParamField = filterFieldsWithQsState.find(item => item === field);\n\n    // Check if the filter field exists in qs param.\n    const param = params.find(item => item[0] === field);\n\n    return {\n      foundIdx,\n      parsed,\n      isQsParamField,\n      param,\n    };\n  },\n  /**\n   * Updates the parsed object by adding the field value in question to its param key.\n   *\n   * @param field\n   *   this.props.query.searchField.field (i.e. the solr field name)\n   * @param value\n   *   The value of the field with which interaction has happened.\n   * @param param\n   *   An object with the as param and value for this field, if it exists.\n   * @param parsed\n   *   An object with parsed qs params and their values.\n   * @returns Object\n   *   An updated parsed object with the field value in question added.\n   */\n  addValueToQsParam: ({\n    field,\n    value,\n    param,\n    parsed,\n  }) => {\n    const newParsed = parsed;\n    // Handle single value params.\n    if (typeof param[1] !== 'object' && value !== param[1]) {\n      // Add the param for this field from the parsed qs object.\n      newParsed[field] = value;\n    }\n    // Handle multi value params.\n    if (typeof param[1] === 'object' && !param[1].includes(value)) {\n      // Add the list item facet value to the param value.\n      param[1].push(value);\n      // Set the new param value.\n      newParsed[field] = [...param[1]];\n    }\n    return newParsed;\n  },\n  /**\n   * Updates the parsed object by adding the field and its value to the\n   *   current object of params and their values.\n   *\n   * @param field\n   *   this.props.query.searchField.field (i.e. the solr field name)\n   * @param value\n   *   The value of the field with which interaction has happened.\n   * @param param\n   *   An object with the as param and value for this field, if it exists.\n   * @param parsed\n   *   An object with parsed qs params and their values.\n   * @returns Object\n   *   An updated parsed object with the field + value added.\n   */\n  addQsParam: ({\n    field,\n    value,\n    parsed,\n  }) => {\n    const newParsed = parsed;\n    const fieldType = field.split('_')[0];\n    const isMultiple = fieldType.charAt(fieldType.length - 1) === 'm';\n\n    // Handle single value params.\n    if (!isMultiple) {\n      // Add the param for this field from the parsed qs object.\n      newParsed[field] = value;\n    }\n    // Handle multi value params.\n    if (isMultiple) {\n      // Set the new param value.\n      newParsed[field] = [value];\n    }\n    return newParsed;\n  },\n  /**\n   * Updates the parsed object by removing the field value in question to its param key.\n   *\n   * @param field\n   *   this.props.query.searchField.field (i.e. the solr field name)\n   * @param value\n   *   The value of the field with which interaction has happened.\n   * @param param\n   *   An object with the as param and value for this field, if it exists.\n   * @param parsed\n   *   An object with parsed qs params and their values.\n   * @returns Object\n   *   An updated parsed object with the field value in question removed.\n   */\n  removeValueFromQsParam: ({\n    field,\n    value,\n    param,\n    parsed,\n  }) => {\n    const newParsed = parsed;\n    // Remove value from parsed qs params.\n    // Handle single value params.\n    if (typeof param[1] !== 'object' && value === param[1]) {\n      // Remove the param for this field from the parsed qs object.\n      delete newParsed[field];\n    }\n    // Handle multi value params.\n    if (typeof param[1] === 'object' && param[1].includes(value)) {\n      // Remove the list facet value from the param.\n      newParsed[field] = param[1].filter(item => item !== value);\n    }\n\n    return newParsed;\n  },\n  /**\n   * Updates the browser window.history with an entry based on the new parsed qs params and values.\n   *\n   * @param parsed\n   *   An object with parsed qs params and their values.\n   */\n  addNewUrlToBrowserHistory: (parsed) => {\n    // Update the search querystring param with the value from the search field.\n    const stringified = queryString.stringify(parsed, { arrayFormat: 'bracket' });\n    // Update the querystring params in the browser, add path to history.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method\n    if (window.history.pushState) {\n      const newurl = `${window.location.protocol}//${window.location.host}${window.location.pathname}?${stringified}`;\n      window.history.pushState({ path: newurl }, '', newurl);\n    } else {\n      window.location.search = stringified;\n    }\n  },\n  /**\n   * Sets query.searchFields state based on the state of the qs.\n   * Allows searches to be executed on app load based on URL.\n   *\n   * @param params\n   *   QS params broken into array of [key,value] pairs.\n   * @param searchField\n   *   Search field in question. (this.props.query.searchField)\n   * @returns Object\n   *   Updated this.props.query.searchField based on qs param values.\n   */\n  setFieldStateFromQs: ({\n    params,\n    searchField,\n  }) => {\n    // Make a copy of the searchField arg.\n    const newSearchField = searchField;\n    // Check if the filter field exists in qs params.\n    const param = params.find(item => item[0] === searchField.field);\n    // Check if the filter field is sm_federated_terms.\n    // If searchField has corresponding qs param present.\n    if (param) {\n      // Since there is a param for this search field, set it's toggle group to be open.\n      // Note: sm_federated_terms needs to list active \"parents\".\n      // See below in logic for multivalue fields.\n      newSearchField.collapse = false;\n      // Ensure we can push to searchField value.\n      newSearchField.value = searchField.value || [];\n      // Don't add qs param values if they're already set in app state.\n      // Push single values onto the searchField.value array.\n      if (typeof param[1] !== 'object' && !searchField.value.find(item => item === param[1])) {\n        newSearchField.value.push(decodeURI(param[1]));\n      }\n      // Concatenate existing searchField.value array with multivalue param array..\n      if (typeof param[1] === 'object' && searchField.value !== param[1]) {\n        const isFederatedTerms = searchField.field === 'sm_federated_terms';\n        if (isFederatedTerms) {\n          const expandedHierarchies = [];\n          param[1].forEach((item) => {\n            // Add the first part of the term to indicate it's toggle should be open.\n            expandedHierarchies.push(item.split('>')[0]);\n          });\n          // Set tm_federated_terms expanded hierarchies.\n          newSearchField.expandedHierarchies = expandedHierarchies;\n        }\n        // Decode param values.\n        const decodedParam = param[1].map(item => decodeURI(item));\n        // Set the searchField.value to the new decoded param values.\n        newSearchField.value = [...decodedParam];\n      }\n    } else {\n      // If the searchField does not have qs param present, clear its value in state.\n      delete newSearchField.value;\n      // Set its sidebar toggle group to be closed.\n      newSearchField.collapse = true;\n    }\n\n    return newSearchField;\n  },\n};\n\nexport default {\n  highlightText,\n  filterFieldsWithQsState,\n  qs,\n};\n","import React from 'react';\nimport queryString from 'query-string';\nimport he from 'he';\nimport PropTypes from 'prop-types';\nimport Autosuggest from 'react-autosuggest';\nimport helpers from '../../helpers';\nimport SearchIcon from '../icons/search';\n\n// Renders autocomplete text input and submit button for text search.\n// Rendered when env config autocomplete is present.\n// @see /env.local.js.example\nclass FederatedTextSearchAsYouType extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      reset: false,\n    };\n\n    this.getSuggestionValue = this.getSuggestionValue.bind(this);\n    this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.loadSuggestions = this.loadSuggestions.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onSuggestionSelected = this.onSuggestionSelected.bind(this);\n    this.onSuggestionsFetchRequested = this.onSuggestionsFetchRequested.bind(this);\n    this.onSuggestionsClearRequested = this.onSuggestionsClearRequested.bind(this);\n    this.renderSuggestion = this.renderSuggestion.bind(this);\n    this.renderSuggestionsContainer = this.renderSuggestionsContainer.bind(this);\n    this.shouldRenderSuggestions = this.shouldRenderSuggestions.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // nextProps.value will be null if the filter is reset.\n    // The logic here is rather tortured, which seemed a better option\n    // than trying to fix the iteration bug in the core react suite.\n    // See https://github.com/palantirnet/federated-search-react/pull/63.\n    // The 'reset' state indicates that we should reset the field. The\n    // 'active' variable indicates that we are clearing the field and\n    // should not act on the nextProps value.\n    var active = false;\n    if (nextProps.value !== null) {\n      this.setState({\n        reset: true,\n      });\n      active = false;\n    }\n    if (nextProps.value === null && this.state.reset === true) {\n      this.setState({\n        value: \"\",\n        suggestions: [],\n        reset: false,\n      });\n      active = true;\n    }\n    if ((this.state.value !== \"\" || this.props.value !== null) && active === false) {\n      this.setState({\n        value: nextProps.suggestQuery && nextProps.suggestQuery.value\n          ? nextProps.suggestQuery.value\n          : nextProps.value,\n        suggestions: nextProps.suggestions ? nextProps.suggestions.docs : this.state.suggestions,\n      });\n    }\n  }\n\n  /**\n   * Called every time the input value changes\n   *\n   * @param event\n   *   Event object\n   * @param newValue\n   *   The new value of the input\n   * @param method\n   *   String describing how the change has occurred. The possible values are:\n   *     'down' - user pressed Down\n   *     'up' - user pressed Up\n   *     'escape' - user pressed Escape\n   *     'enter' - user pressed Enter\n   *     'click' - user clicked (or tapped) on suggestion\n   *     'type' - none of the methods above (usually means that user typed something,\n   *       but can also be that they pressed Backspace, pasted something into the input, etc.)\n   */\n  onChange(event, { newValue, method }) {\n    if (method === 'type') {\n      this.setState({\n        value: newValue,\n      });\n\n      // Ensure that the suggestQuery.value prop gets cleared on backspace / cut.\n      this.props.suggestQuery.value = newValue;\n    }\n  }\n\n  // Called every time you need to recalculate suggestions.\n  onSuggestionsFetchRequested({ value }) {\n    this.loadSuggestions(value);\n  }\n\n  /**\n   * Called every time suggestion is selected via mouse or keyboard.\n   *\n   * @param event\n   *   Event object\n   * @param suggestion\n   *   The selected suggestion\n   *   Unused: suggestionValue\n   *     The value of the selected suggestion\n   *     (equivalent to getSuggestionValue(suggestion))\n   *   Unused: suggestionIndex\n   *     The index of the selected suggestion in the suggestions array\n   *   Unused: sectionIndex\n   *     When rendering multiple sections,this will be the section index\n   *     (in suggestions) of the selected suggestion. Otherwise, it will be null.\n   * @param method\n   *   String describing how user selected the suggestion. The possible values are:\n   *     'click' - user clicked (or tapped) on the suggestion\n   *     'enter' - user selected the suggestion using Enter\n   */\n  onSuggestionSelected(event, { suggestion, method }) {\n    const { mode } = this.props.autocomplete;\n    // If results are rendered, redirect to the result url and prevent search execution.\n    if (mode === 'result' && (event.keyCode === 13 || method === 'click')) {\n      event.preventDefault(); // don't submit the search query\n      event.stopPropagation(); // don't bubble up event\n      window.location.assign(suggestion.sm_urls[0]); // redirect to the selected item\n    }\n  }\n\n  // Called every time you need to set suggestions to [].\n  onSuggestionsClearRequested() {\n    this.setState({\n      suggestions: [],\n    });\n  }\n\n  // For search term autocomplete mode:\n  // When user navigates the suggestions using the Up and Down keys,\n  // the input value should be set according to the highlighted suggestion.\n  getSuggestionValue(suggestion) {\n    const { mode } = this.props.autocomplete;\n    if (mode === 'result') return false;\n    if (mode === 'term') {\n      return suggestion.ss_federated_title; // @todo get the value of the term\n    }\n    return false;\n  }\n\n  // Gets search suggestions based on input.\n  // @todo support different modes: term, results\n  loadSuggestions(value) {\n    // Run typeahead search query based on the autocomplete config and current value.\n    this.props.onSuggest(this.props.query, this.props.autocomplete, value);\n  }\n\n  handleInputKeyDown(event) {\n    // Call submit handler when enter is pressed while text input\n    // has focused.  This functionality is prevented by the\n    // onSuggestionSelected method.\n    if (event.keyCode === 13 && !event.defaultPrevented) {\n      this.handleSubmit();\n    }\n\n    // Clear and close suggetsions.\n    if (event.keyCode === 27) {\n      this.onSuggestionsClearRequested();\n    }\n  }\n\n  // Trigger search query execution by updating the current URL based\n  // on current state.\n  handleSubmit() {\n    this.props.onChange(this.props.field, this.state.value);\n    // Get existing querystring params.\n    const parsed = queryString.parse(window.location.search);\n    // Update the search querystring param with the value from the search field.\n    parsed.search = this.state.value;\n    const stringified = queryString.stringify(parsed);\n    // Update the querystring params in the browser, add path to history.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method\n    if (window.history.pushState) {\n      const newUrl = `${window.location.protocol}//${window.location.host}${window.location.pathname}?${stringified}`;\n      window.history.pushState({ path: newUrl }, '', newUrl);\n    } else {\n      window.location.search = stringified;\n    }\n  }\n\n  // When the input is focused, Autosuggest will consult this function\n  // when to render suggestions. Use it, for example, if you want to\n  // display suggestions when input value is at least 2 characters long.\n  shouldRenderSuggestions(value) {\n    const numChars = this.props.autocomplete.numChars || 2;\n    return value.trim().length > numChars;\n  }\n\n  renderSuggestionsContainer({ containerProps, children, query }) {\n    const { mode } = this.props.autocomplete;\n    const hasResultModeConfig = Object.hasOwnProperty.call(this.props.autocomplete, 'result');\n    const hasTermModeConfig = Object.hasOwnProperty.call(this.props.autocomplete, 'term');\n    const resultTitleText = hasResultModeConfig && this.props.autocomplete.result.titleText\n      ? this.props.autocomplete.result.titleText\n      : 'What are you looking for?';\n    const resultShowDirectionsText = hasResultModeConfig\n      && Object.hasOwnProperty.call(this.props.autocomplete.result, 'showDirectionsText')\n      ? this.props.autocomplete.result.showDirectionsText\n      : true;\n    const termTitleText = hasTermModeConfig && this.props.autocomplete.term.titleText\n      ? this.props.autocomplete.term.titleText\n      : 'Suggested search terms';\n    const termShowDirectionsText = hasTermModeConfig\n      && Object.hasOwnProperty.call(this.props.autocomplete.term, 'showDirectionsText')\n      ? this.props.autocomplete.term.showDirectionsText\n      : true;\n\n    const titleText = mode === 'term' ? termTitleText : resultTitleText;\n    const directionsText = mode === 'term' ? termShowDirectionsText : resultShowDirectionsText;\n\n    const suggestionsWrapperClasses = directionsText\n      ? 'react-autosuggest__suggestions-itemslist-wrapper react-autosuggest__suggestions-itemslist-wrapper--with-directions'\n      : 'react-autosuggest__suggestions-itemslist-wrapper';\n\n    return (\n      <div {... containerProps}>\n        <div className=\"react-autosuggest__container-title\">\n          {titleText}\n          <button className=\"react-autosuggest__container-close-button\" onClick={this.onSuggestionsClearRequested}>x</button>\n        </div>\n        <div className={suggestionsWrapperClasses}>\n          {children}\n        </div>\n        {/* @todo add logic for suggestion mode and alter directionsText accordingly */}\n        {directionsText &&\n          <div className=\"react-autosuggest__container-directions\">\n            <span className=\"react-autosuggest__container-directions-item\">Press <code>ENTER</code> to search for <strong>{query}</strong> or <code>ESC</code> to close.</span>\n            <span className=\"react-autosuggest__container-directions-item\">Press ↑ and ↓ to highlight a suggestion then <code>ENTER</code> to be redirected to that suggestion.</span>\n          </div>\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Define how suggestions are rendered.\n   * Note: must be a pure function.\n   *\n   * @param suggestion\n   *   The suggestion to render\n   *\n   * @param query\n   *   Used to highlight the matching string. As user types in the input,\n   *   query will be equal to the trimmed value of the input. Then, if user\n   *   interacts using the Up or Down keys, the input will get the value of\n   *   the highlighted suggestion, but query will remain to be equal to the\n   *   trimmed value of the input prior to the Up and Down interactions.\n   *\n   * unused - isHighlighted\n   *   Whether or not the suggestion is highlighted.\n   *\n   * @return a ReactElement\n   */\n  renderSuggestion(suggestion, { query }) {\n    // Determine if we are returning results or terms. @todo or both\n    const { mode } = this.props.autocomplete;\n    // Decode any html entities that come from title.\n    const decodedTitle = he.decode(suggestion.ss_federated_title);\n    // Wrap the query partial string in <b>.\n    const highlightedTitle = helpers.highlightText(decodedTitle, query);\n    // Define a11y message i.e. (1 of 3) to append to suggestion text.\n    const currentHumanIndex = this.state.suggestions.indexOf(suggestion) + 1;\n    const suggestionsLength = this.state.suggestions.length;\n\n    // Render plain text for search term suggestions.\n    // @todo update this when we have a return structure for terms.\n    if (mode === 'term') {\n      return (<span>highlightedTitle</span>);\n    }\n\n    // Defaults to result based autosuggestion.\n    // Render a link for search result suggestions.\n    return (\n      <a\n        className=\"react-autosuggest__suggestion-link\"\n        href={suggestion.sm_urls[0]}\n      >\n        {highlightedTitle}\n        <span className=\"fs-element-invisible\">\n          {` (${currentHumanIndex} of ${suggestionsLength})`}\n        </span>\n      </a>\n    );\n  }\n\n  // Wrap the input component with our expected wrapper.\n  static renderInputComponent(inputProps) {\n    return (\n      <div className=\"fs-search-form__input-wrapper\">\n        <input {...inputProps} />\n      </div>\n    );\n  }\n\n  render() {\n    const { label, suggestQuery } = this.props;\n    const { suggestions, value } = this.state;\n    // Define props for autocomplete input element.\n    const inputProps = {\n      type: 'search',\n      name: 'search',\n      id: 'search',\n      className: 'react-autosuggest__input',\n      onChange: this.onChange,\n      onKeyDown: this.handleInputKeyDown,\n      value: value || '',\n      role: 'combobox',\n      'aria-autocomplete': 'both',\n    };\n\n    return (\n      <React.Fragment>\n        <label htmlFor=\"search\" className=\"fs-search-form__label\">{label}</label>\n        <div className=\"fs-search-form__autocomplete-container\">\n          {/* @see: https://github.com/moroshko/react-autosuggest#react-autosuggest */}\n          <Autosuggest\n            focusInputOnSuggestionClick={false}\n            getSuggestionValue={this.getSuggestionValue}\n            inputProps={inputProps}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n            onSuggestionSelected={this.onSuggestionSelected}\n            renderInputComponent={FederatedTextSearchAsYouType.renderInputComponent}\n            renderSuggestion={this.renderSuggestion}\n            renderSuggestionsContainer={this.renderSuggestionsContainer}\n            shouldRenderSuggestions={this.shouldRenderSuggestions}\n            suggestQuery={suggestQuery}\n            suggestions={suggestions}\n          />\n          <button\n            type=\"submit\"\n            className=\"fs-search-form__submit\"\n            onClick={this.handleSubmit}\n          >\n            <span className=\"fs-element-invisible\">Perform Search</span>\n            <SearchIcon />\n          </button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nFederatedTextSearchAsYouType.defaultProps = {\n  label: 'Enter a search term',\n  value: '',\n  suggestQuery: {\n    value: '',\n  },\n};\n\nFederatedTextSearchAsYouType.propTypes = {\n  autocomplete: PropTypes.oneOfType([\n    PropTypes.shape({\n      mode: PropTypes.string,\n      method: PropTypes.string,\n      url: PropTypes.string,\n      queryField: PropTypes.string,\n      suggestionRows: PropTypes.number,\n      numChars: PropTypes.number,\n      result: PropTypes.shape({\n        titleText: PropTypes.string,\n        showDirectionsText: PropTypes.bool,\n      }),\n      term: PropTypes.shape({\n        titleText: PropTypes.string,\n        showDirectionsText: PropTypes.bool,\n      }),\n    }),\n    PropTypes.bool,\n  ]).isRequired,\n  field: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onSuggest: PropTypes.func.isRequired,\n  suggestQuery: PropTypes.shape({\n    value: PropTypes.string,\n  }),\n  value: PropTypes.string,\n};\n\nexport default FederatedTextSearchAsYouType;\n","import React from 'react';\nimport FederatedTextSearchNoAutocomplete from './no-autocomplete';\nimport FederatedTextSearchAsYouType from './search-as-you-type';\n\nconst FederatedTextSearch = (props) => {\n  const { autocomplete } = props;\n  const InputComponent = autocomplete\n    ? FederatedTextSearchAsYouType\n    : FederatedTextSearchNoAutocomplete;\n  return <InputComponent {...props} />;\n};\n\nexport default FederatedTextSearch;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport cx from 'classnames';\nimport AnimateHeight from 'react-animate-height';\nimport helpers from '../../helpers';\n\nclass FederatedListFacet extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filter: '',\n      truncateFacetListsAt: props.truncateFacetListsAt,\n    };\n  }\n\n  handleClick(value) {\n    const {\n      foundIdx,\n      parsed,\n      isQsParamField,\n      param,\n    } = helpers.qs.getFieldQsInfo({\n      field: this.props.field,\n      values: this.props.value,\n      value,\n    });\n\n    // Define var for new parsed qs params object.\n    let newParsed = parsed;\n\n    // If the clicked list facet field is one whose state is tracked in the qs.\n    if (isQsParamField) {\n      // If the click is adding the field value.\n      if (foundIdx < 0) {\n        // If there is already a qs param for this field value.\n        if (param) {\n          // Add value to parsed qs params.\n          newParsed = helpers.qs.addValueToQsParam({\n            field: this.props.field,\n            value,\n            param,\n            parsed,\n          });\n        } else { // If there is not already a qs param for this field value.\n          // Add new qs param for field + value.\n          newParsed = helpers.qs.addQsParam({\n            field: this.props.field,\n            value,\n            parsed,\n          });\n        }\n\n        // Send new query based on app state.\n        this.props.onChange(this.props.field, this.props.value.concat(value));\n      } else { // If the click is removing this field value.\n        // If their is already a qs param for this field value.\n        if (param) {\n          newParsed = helpers.qs.removeValueFromQsParam({\n            field: this.props.field,\n            value,\n            param,\n            parsed,\n          });\n        }\n\n        // Send new query based on app state.\n        this.props.onChange(this.props.field, this.props.value.filter((v, i) => i !== foundIdx));\n      }\n\n      helpers.qs.addNewUrlToBrowserHistory(newParsed);\n    }\n  }\n\n  toggleExpand(hierarchyFacetValue) {\n    this.props.onSetCollapse(this.props.field, !(this.props.collapse || false));\n    // If this is a hierarchical list facet.\n    if (hierarchyFacetValue) {\n      // Determine the current state of the expanded hierarchical list facets.\n      const indexOfExpandedHierarchyFacetValue = this.props.expandedHierarchies\n        .indexOf(hierarchyFacetValue);\n      if (indexOfExpandedHierarchyFacetValue > -1) {\n        // This accordion is currently expanded, so collapse it.\n        this.props.expandedHierarchies.splice(indexOfExpandedHierarchyFacetValue,1);\n      } else {\n        // This accordion is currently collapsed, so expand it.\n        this.props.expandedHierarchies.push(hierarchyFacetValue);\n      }\n    }\n  }\n\n  render() {\n    const {\n      label,\n      facets,\n      field,\n      value,\n      collapse,\n      hierarchy,\n      options,\n    } = this.props;\n    const { truncateFacetListsAt } = this.state;\n\n    const siteList = options.siteList;\n    const facetCounts = facets.filter((facet, i) => i % 2 === 1);\n    const facetValues = facets.filter((facet, i) => i % 2 === 0);\n    // Create an object of facets {value: count} to keep consistent for inputs.\n    const facetInputs = {};\n\n    // Handle site name restrictions.\n    if (field === 'sm_site_name' && siteList.length > 0) {\n      facetValues.forEach((v, i) => {\n        const key = facetValues[i];\n        if (siteList.indexOf(v) > -1) {\n          facetInputs[key] = facetCounts[i];\n        }\n      });\n      // If only one option exists and nothing is selected, don't show it.\n      if (value.length < 1 && Object.keys(facetInputs).length < 2) {\n        return null;\n      }\n    }\n    else {\n      facetValues.forEach((v, i) => {\n        const key = facetValues[i];\n        facetInputs[key] = facetCounts[i];\n      });\n    }\n\n    const expanded = !(collapse || false);\n    const height = expanded ? 'auto' : 0;\n\n    // If we need to generate multiple list-fact accordion groups\n    // from this list-facet field (i.e. sm_federated_terms).\n    if (hierarchy) {\n      // Iterate through sm_federated_terms array of values.\n      // Each value is a string with the format Type>Term.\n      // Define array of types which will render as accordion li links.\n      const types = [];\n      // Define object to hold data for each type:\n      // {\n      //   type: {\n      //     items: [{\n      //       term (the checkbox label),\n      //       facetValue (the checkbox value, Type>Term),\n      //       facetCount (the number of items with this value returned)\n      //     },...],\n      //     expanded: bool (whether or not this accordion is expanded)\n      //   },...\n      // }\n      const terms = {};\n      facetValues.forEach((facetValue, i) => {\n        // Create array of [Type, Term] from Type>Term.\n        const pieces = facetValue.split('>');\n        types.push(pieces[0]);\n        // If we don't already have terms.Type then create it.\n        if (!Object.hasOwnProperty.call(terms, pieces[0])) {\n          terms[pieces[0]] = {};\n          terms[pieces[0]].items = [];\n          terms[pieces[0]].expanded = (this.props.expandedHierarchies.indexOf(pieces[0]) > -1);\n          terms[pieces[0]].height = terms[pieces[0]].expanded ? 'auto' : 0;\n        }\n        // Add the object for this facet value to the array of terms for this type.\n        terms[pieces[0]].items.push({\n          term: pieces[1],\n          facetValue,\n          facetCount: facetCounts[i],\n        });\n      });\n\n      // Remove duplicate types\n      // So facet values of \"Condition>Bones\", \"Condition>Bone growth\" should only\n      // Add \"Condition\" type once so we only render 1 Condition accordion group.\n      const uniqueTypes = types.filter((v, i, self) => self.indexOf(v) === i).filter(String);\n\n      // Define array of accordion Lis which we'll populate with react fragments.\n      const listFacetHierarchyLis = [];\n      // Define array of checkbox Lis which we'll populate with react fragments, per type.\n      const listFacetHierarchyTermsLis = [];\n      // Iterate through types (accordion lis).\n      uniqueTypes.forEach((type, i) => {\n        // Populate the checkbox lis react fragments for each type.\n        listFacetHierarchyTermsLis[type] = [];\n        terms[type].items.forEach((termObj, i) => termObj.facetCount\n          && listFacetHierarchyTermsLis[type].push(<li className=\"fs-search-accordion__content-item\" key={`${termObj.term}_${termObj.facetValue}_${i}`}>\n            <label className=\"fs-search-accordion__checkbox-label\">\n            <input\n              type=\"checkbox\"\n              name={type}\n              className=\"fs-search-accordion__checkbox-input\"\n              value={termObj.facetValue}\n              checked={value.indexOf(termObj.facetValue) > -1}\n              onChange={() => this.handleClick(termObj.facetValue)}\n            /> {termObj.term}\n              <span className=\"facet-item-amount\"> ({termObj.facetCount}\n                <span className=\"fs-element-invisible\">results</span>)\n              </span>\n            </label>\n          </li>));\n\n        // Populate the accordion lis array with all of its checkboxes.\n        listFacetHierarchyTermsLis[type].length && listFacetHierarchyLis.push(\n          <li className=\"fs-search-accordion__content-item\" id={`solr-list-facet-${type}`} key={`solr-list-facet-${type}-${i}`}>\n            <div\n              tabIndex=\"0\"\n              className={cx('fs-search-accordion__title', { 'js-fs-search-accordion-open': terms[type].expanded })}\n              id={label.replace(/\\s+/g, '-').toLowerCase()}\n              onClick={this.toggleExpand.bind(this, type)}\n              onKeyDown={(event) => {\n                if (event.keyCode === 13) {\n                  this.toggleExpand(type);\n                }\n              }}\n            >\n              <span className=\"fs-element-invisible\">Toggle filter group for</span> {type}\n            </div>\n            <AnimateHeight\n              duration={600}\n              height={terms[type].height}\n            >\n              <ul className=\"fs-search-accordion__content\" key={`solr-list-facet-${type}-ul`}>\n                {listFacetHierarchyTermsLis[type]}\n              </ul>\n            </AnimateHeight>\n          </li>);\n      });\n      // Render the group of accordion lis with their facet value checkbox lists.\n      return listFacetHierarchyLis;\n    }\n    // This is not a hierarchy of accordion groups,\n    // just render the single list-facet accordion.\n    return (\n      <li className=\"fs-search-accordion__group-item\" id={`solr-list-facet-${field}`}>\n        <div\n          tabIndex=\"0\"\n          className={cx('fs-search-accordion__title', { 'js-fs-search-accordion-open': expanded })}\n          id={label.replace(/\\s+/g, '-').toLowerCase()}\n          onClick={this.toggleExpand.bind(this)}\n          onKeyDown={(event) => {\n            if (event.keyCode === 13) {\n              this.toggleExpand();\n            }\n          }}\n        >\n          <span className=\"fs-element-invisible\">Toggle filter group for</span> {label}\n        </div>\n        <AnimateHeight\n          duration={600}\n          height={height}\n        >\n          <ul className=\"fs-search-accordion__content\" key={`solr-list-facet-${field}-ul`}>\n            {facetValues.filter((facetValue, i) => facetInputs[facetValue] > 0\n                && (truncateFacetListsAt < 0 || i < truncateFacetListsAt))\n              .map((facetValue, i) => {\n                if (this.state.filter.length === 0\n                  || facetValue.toLowerCase().indexOf(this.state.filter.toLowerCase()) > -1) {\n                  return (\n                    <li className=\"fs-search-accordion__content-item\" key={`${facetValue}_${facetInputs[facetValue]}`}>\n                      <label className=\"fs-search-accordion__checkbox-label\">\n                        <input\n                          type=\"checkbox\"\n                          name={field}\n                          value={facetValue}\n                          checked={value.indexOf(facetValue) > -1}\n                          onChange={() => this.handleClick(facetValue)}\n                        /> {facetValue}\n                        <span className=\"facet-item-amount\"> ({facetInputs[facetValue]}\n                          <span className=\"fs-element-invisible\">results</span>)\n                        </span>\n                      </label>\n                    </li>\n                  );\n                }\n                return null;\n              })}\n          </ul>\n        </AnimateHeight>\n      </li>\n    );\n  }\n}\n\nFederatedListFacet.defaultProps = {\n  hierarchy: false,\n  expandedHierarchies: [],\n  value: [],\n};\n\nFederatedListFacet.propTypes = {\n  bootstrapCss: PropTypes.bool,\n  children: PropTypes.array,\n  collapse: PropTypes.bool,\n  expandedHierarchies: PropTypes.array,\n  facetSort: PropTypes.string,\n  facets: PropTypes.array.isRequired,\n  field: PropTypes.string.isRequired,\n  hierarchy: PropTypes.bool,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  onFacetSortChange: PropTypes.func,\n  onSetCollapse: PropTypes.func,\n  query: PropTypes.object,\n  truncateFacetListsAt: PropTypes.number,\n  value: PropTypes.array,\n};\n\nexport default FederatedListFacet;\n","import PropTypes from 'prop-types';\nimport React from \"react\";\nimport cx from \"classnames\";\nimport moment from \"moment\";\nimport 'react-dates/initialize';\nimport { DateRangePicker } from 'react-dates';\nimport AnimateHeight from 'react-animate-height';\n\nclass FederatedRangeFacet extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filter: \"\",\n      truncateFacetListsAt: props.truncateFacetListsAt,\n      startDate: null,\n      endDate: null,\n      focusedInput: null,\n    };\n  }\n\n  toggleExpand() {\n    this.props.onSetCollapse(this.props.field, !(this.props.collapse || false));\n  }\n\n  handleCalendarClose(value) {\n    // If there are not start/end dates, we've likely just cleared them, so update props.\n    if (value.startDate !== null && value.endDate !== null) {\n      // The default time is noon, so start date should start at midnight.\n      const momentToSolrStart = moment(value.startDate).subtract({hours:12}).format(\"YYYY-MM-DDTHH:mm:ss\") + 'Z';\n      // The default time is noon, so end date should end at 11:59:59.\n      const momentToSolrEnd = moment(value.endDate).add({hours:11, minutes:59, seconds: 59}).format(\"YYYY-MM-DDTHH:mm:ss\") + 'Z';\n      this.props.onChange(this.props.field, [momentToSolrStart, momentToSolrEnd]);\n    }\n  }\n\n  handleDatesChange(startDate,endDate) {\n    this.setState({startDate, endDate});\n    // If there are no start/end dates, something has just cleared them, so update props.\n    if (startDate === null && endDate === null) {\n      this.props.onChange(this.props.field, []);\n    }\n  }\n\n  // See: https://reactjs.org/docs/react-component.html#the-component-lifecycle\n  componentDidUpdate(nextProps) {\n    // Clear component inputs when rangeFacet value transitions from populated->empty.\n    if (this.props.value.length && !nextProps.value.length) {\n      this.setState({\n        startDate: null,\n        endDate: null\n      });\n    }\n  }\n\n  render() {\n    const {label, facets, field, collapse } = this.props;\n\n    const expanded = !(collapse || false);\n    const height = expanded ? 'auto' : 0;\n\n    // Set better react date props for responsive behavior.\n    // See: https://github.com/airbnb/react-dates/issues/262\n    let calendarOrientation = undefined; // prop will not be added unless set.\n    let calendarFullScreen = undefined; // prop will not be added unless set.\n    let calendarMonths = 2; // view 2 months on large screens\n    // When viewing 2 months, the last month should be the current.\n    let getLastMonth = () => moment().subtract(1, 'months');\n\n    // Set prop values for mobile.\n    if (window.matchMedia(\"(max-width: 600px)\").matches) {\n      /* the viewport is less than 600 pixels wide */\n      calendarMonths = 1;\n      calendarOrientation = \"vertical\";\n      calendarFullScreen = true;\n      getLastMonth = undefined; // prop will not be added on mobile.\n    }\n\n    return (\n      <li className=\"fs-search-accordion__group-item\" id={`solr-list-facet-${field}`}>\n        <div\n          tabIndex=\"0\"\n          className={cx(\"fs-search-accordion__title\", {\"js-fs-search-accordion-open\": expanded})}\n          id={label.replace(/\\s+/g, '-').toLowerCase()}\n          onClick={this.toggleExpand.bind(this)}\n          onKeyDown={(event)=>{if (event.keyCode === 13) {this.toggleExpand()}}}\n        >{label}</div>\n        <AnimateHeight\n          duration={600}\n          height={height}\n        >\n          <ul className=\"fs-search-accordion__content\">\n            <li className=\"fs-search-accordion__content-item\">\n              {/* See: https://github.com/airbnb/react-dates#daterangepicker */}\n              <DateRangePicker\n                startDate={this.state.startDate} // momentPropTypes.momentObj or null,\n                startDateId=\"solr-start-date\" // PropTypes.string.isRequired,\n                endDate={this.state.endDate} // momentPropTypes.momentObj or null,\n                endDateId=\"solr-end-date\" // PropTypes.string.isRequired,\n                onDatesChange={({ startDate, endDate }) => this.handleDatesChange(startDate,endDate)} // PropTypes.func.isRequired,\n                focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n                onFocusChange={focusedInput => this.setState({ focusedInput })} // PropTypes.func.isRequired,\n                isOutsideRange={(day) => {\n                  const today = moment().format('YYYY-MM-DD');\n                  return day.diff(today, 'days') > 0 || moment(day).isBefore(facets[0])\n                }} // allow only past dates & dates after earliest facet value\n                minimumNights={0} // allow just 1 day (same start/end date)\n                small={true} // use the smaller theme\n                showClearDates // show the clear dates button\n                onClose={(value)=> this.handleCalendarClose(value)}\n                // custom phrases for screenreader\n                phrases={{\n                  calendarLabel: \"Calendar\",\n                  chooseAvailableStartDate: ({ date }) => `Choose ${date} as your search filter start date.`,\n                  chooseAvailableEndDate: ({ date }) => `Choose ${date} as your search filter end date.`,\n                  clearDates: \"Clear Dates\",\n                  closeDatePicker: \"Close\",\n                  dateIsSelected: ({ date }) => `You have selected ${date}.`,\n                  dateIsUnavailable: ({ date }) => `Sorry, ${date} is unavailable.`,\n                  enterKey: \"Enter key\",\n                  escape: \"Escape key\",\n                  focusStartDate: \"Interact with the calendar and add the check-in date for your trip.\",\n                  hideKeyboardShortcutsPanel: \"Close the shortcuts panel.\",\n                  homeEnd: \"Home and end keys\",\n                  jumpToNextMonth: \"Move forward to switch to the next month.\",\n                  jumpToPrevMonth: \"Move backward to switch to the previous month.\",\n                  keyboardNavigationInstructions: \"Press the down arrow key to interact with the calendar and\\n  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.\",\n                  keyboardShortcuts: \"Keyboard Shortcuts\",\n                  leftArrowRightArrow: \"Right and left arrow keys\",\n                  moveFocusByOneDay: \"Move backward (left) and forward (right) by one day.\",\n                  moveFocusByOneMonth: \"Switch months.\",\n                  moveFocusByOneWeek: \"Move backward (up) and forward (down) by one week.\",\n                  moveFocustoStartAndEndOfWeek: \"Go to the first or last day of a week.\",\n                  openThisPanel: \"Open this panel.\",\n                  pageUpPageDown: \"page up and page down keys\",\n                  questionMark: \"Question mark\",\n                  returnFocusToInput: \"Return to the date input field.\",\n                  selectFocusedDate: \"Select the date in focus.\",\n                  showKeyboardShortcutsPanel: \"Open the keyboard shortcuts panel.\",\n                  upArrowDownArrow: \"up and down arrow keys\"\n                }}\n                // > mobile only props\n                initialVisibleMonth={getLastMonth} // large viewports only\n                // mobile only props\n                numberOfMonths={calendarMonths} // view one month at a time\n                orientation={calendarOrientation} // use vertical orientation\n                withFullScreenPortal={calendarFullScreen} // use full screen\n              />\n            </li>\n          </ul>\n        </AnimateHeight>\n      </li>\n    );\n  }\n}\n\nFederatedRangeFacet.defaultProps = {\n  value: []\n};\n\nFederatedRangeFacet.propTypes = {\n  bootstrapCss: PropTypes.bool,\n  children: PropTypes.array,\n  collapse: PropTypes.bool,\n  facetSort: PropTypes.string,\n  facets: PropTypes.array.isRequired,\n  field: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  onFacetSortChange: PropTypes.func,\n  onSetCollapse: PropTypes.func,\n  query: PropTypes.object,\n  truncateFacetListsAt: PropTypes.number,\n  value: PropTypes.array\n};\n\nexport default FederatedRangeFacet;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport cx from 'classnames';\nimport AnimateHeight from 'react-animate-height';\n\n\nclass FederatedSearchFieldContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // This will return the width of the viewport.\n    let intFrameWidth = window.innerWidth;\n\n    this.state = {\n      // Filters are visible for large / hidden for small screens by default.\n      expanded: intFrameWidth > 900,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n\n    window.addEventListener('resize', () => {\n      // Desktop height.\n      let height = 'auto';\n      // In mobile view, when resized, lets close things.\n      if (window.innerWidth < 900) {\n        height = 0;\n      }\n      this.setState({\n        expanded: height,\n      });\n    });\n  }\n\n  handleClick() {\n    this.setState({\n      expanded: !this.state.expanded,\n    });\n  }\n\n  render() {\n    const { onNewSearch } = this.props;\n    const height = this.state.expanded ? 'auto' : 0;\n\n    return (\n      <div className=\"fs-search-filters\">\n        <button\n          className={cx('fs-search-filters__trigger', {\n            'js-fs-search-filters-open': this.state.expanded,\n          })}\n          onClick={this.handleClick}\n        >\n            Filter Results\n        </button>\n        <AnimateHeight\n          duration={450}\n          height={height}\n        >\n          <form className=\"fs-search-filters__form\">\n            <section className=\"fs-search-accordion\" aria-labelledby=\"fs-section-title\">\n              <div className=\"fs-search-filters__row\">\n                <h2 className=\"fs-search-filters__title\" id=\"fs-section-title\">Filter Results</h2>\n              </div>\n              { this.props.resultsCount > 0\n                ? (<ul className=\"fs-search-accordion__group\">{this.props.children}</ul>)\n                : <div className=\"fs-search-filters__no-results\">There are no results to filter.</div> }\n            </section>\n\n            { this.props.resultsCount > 0\n              ? <div className=\"fs-search-filters__row\"><button className=\"fs-search-filters__reset\" type=\"button\" onClick={onNewSearch}>Clear All</button></div>\n              : null }\n          </form>\n        </AnimateHeight>\n      </div>\n    );\n  }\n}\n\nFederatedSearchFieldContainer.propTypes = {\n  children: PropTypes.array,\n  onNewSearch: PropTypes.func,\n};\n\nexport default FederatedSearchFieldContainer;\n","import PropTypes from 'prop-types';\nimport React from \"react\";\n\nclass FederatedResultList extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<h2 className=\"fs-element-invisible\">Search results</h2>\n\t\t\t\t<ul className=\"fs-search-results\">\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</ul>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nFederatedResultList.propTypes = {\n\tchildren: PropTypes.array\n};\n\nexport default FederatedResultList;\n","/**\n * Defines react components from chevron svgs (see styleguide/src/includes/svg)\n * @todo consider using an svg loader package (i.e. https://www.npmjs.com/package/react-svg-loader) to import and return the svg elements directly vs duplicating markup\n */\n\nimport React from \"react\";\n\nconst DoubleChevronLeft = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M16.1 4.5c.4.4.5 1 0 1.6L12.3 10l3.7 3.9c.5.5.4 1.1 0 1.6-.4.4-1.2.4-1.6 0-.4-.4-4.5-4.7-4.5-4.7-.2-.2-.3-.5-.3-.8s.1-.6.3-.8c0 0 4.1-4.3 4.5-4.7.5-.4 1.2-.4 1.7 0z\"/><path d=\"M10.1 4.5c.4.4.5 1 0 1.6L6.3 10l3.7 3.9c.5.5.4 1.1 0 1.6-.4.4-1.2.4-1.6 0-.4-.4-4.5-4.7-4.5-4.7-.2-.2-.3-.5-.3-.8s.1-.6.3-.8c0 0 4.1-4.3 4.5-4.7.5-.4 1.2-.4 1.7 0z\"/></svg>\n);\n\nconst ChevronLeft = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M12.452 4.516c.446.436.481 1.043 0 1.576L8.705 10l3.747 3.908c.481.533.446 1.141 0 1.574-.445.436-1.197.408-1.615 0-.418-.406-4.502-4.695-4.502-4.695a1.095 1.095 0 0 1 0-1.576s4.084-4.287 4.502-4.695c.418-.409 1.17-.436 1.615 0z\"/></svg>\n);\n\nconst ChevronRight = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M9.163 4.516c.418.408 4.502 4.695 4.502 4.695a1.095 1.095 0 0 1 0 1.576s-4.084 4.289-4.502 4.695c-.418.408-1.17.436-1.615 0-.446-.434-.481-1.041 0-1.574L11.295 10 7.548 6.092c-.481-.533-.446-1.141 0-1.576.445-.436 1.197-.409 1.615 0z\"/></svg>\n);\n\nconst DoubleChevronRight = () =>  (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M5.6 4.5c.4.4 4.5 4.7 4.5 4.7.2.2.3.5.3.8s-.1.6-.3.8c0 0-4.1 4.3-4.5 4.7-.4.4-1.2.4-1.6 0-.4-.4-.5-1 0-1.6L7.7 10 3.9 6.1c-.4-.5-.4-1.1 0-1.6.5-.4 1.2-.4 1.7 0z\"/><path d=\"M11.6 4.5c.4.4 4.5 4.7 4.5 4.7.2.2.3.5.3.8s-.1.6-.3.8c0 0-4.1 4.3-4.5 4.7-.4.4-1.2.4-1.6 0-.4-.4-.5-1 0-1.6l3.7-3.9-3.8-3.9c-.4-.5-.4-1.1 0-1.6.5-.4 1.2-.4 1.7 0z\"/></svg>\n);\n\nexport {DoubleChevronLeft, ChevronLeft, ChevronRight, DoubleChevronRight};\n","import PropTypes from 'prop-types';\nimport React from \"react\";\nimport cx from \"classnames\";\nimport {DoubleChevronLeft, ChevronLeft, ChevronRight, DoubleChevronRight} from \"../icons/chevrons\";\n\nclass FederatedPagination extends React.Component {\n\n  onPageChange(page, pageAmt) {\n    if (page >= pageAmt || page < 0) { return; }\n    this.props.onChange(page);\n\n    if(document.getElementById(\"stat\") != null) {\n      document.getElementById(\"stat\").focus({preventScroll: false});\n    }\n  }\n\n  buildHandleEnterKeyPress = (onClick) => ({ key }) => {\n    if (key === 'Enter') {\n      onClick();\n    }\n  };\n\n  renderPage(page, currentPage, key) {\n    let isCurrentPage = page === currentPage;\n    return (\n      <li className={cx(\"fs-search-pager__item\", (isCurrentPage ? 'is-active' : 'not-active'))} key={key}>\n        <button className={cx(\"fs-search-pager__item-button fs-search-pager__item-button--number\")} tabIndex=\"0\" onClick={this.onPageChange.bind(this, page)} onKeyPress={this.buildHandleEnterKeyPress(this.onPageChange.bind(this, page))} title={isCurrentPage ? \"Current page\" : `Go to page ${page + 1}`} aria-current={isCurrentPage ? page + 1 : undefined}>\n          <span className=\"fs-element-invisible\">Page</span>{page + 1}\n        </button>\n      </li>\n    );\n  }\n\n  render() {\n    const { query, results } = this.props;\n    const { start, rows } = query;\n    const { numFound } = results;\n    const pageAmt = Math.ceil(numFound / rows);\n    const currentPage = start / rows;\n    const numButtons = this.props.options.paginationButtons || 5;\n\n    let rangeStart = currentPage - 2 < 0 ? 0 : currentPage - 2;\n    let rangeEnd = rangeStart + numButtons > pageAmt ? pageAmt : rangeStart + numButtons;\n\n    if (rangeEnd - rangeStart < numButtons && rangeStart > 0) {\n      rangeStart = rangeEnd - numButtons;\n      if (rangeStart < 0) { rangeStart = 0; }\n    }\n\n    let pages = [];\n    for (let page = rangeStart; page < rangeEnd; page++) {\n      if (pages.indexOf(page) < 0) {\n        pages.push(page);\n      }\n    }\n\n    let firstPageHidden = (currentPage === 0);\n    let prevPageHidden = (currentPage - 1 < 0);\n    let nextPageHidden = (currentPage + 1 >= pageAmt);\n    let lastPageHidden = (pageAmt === 0 || currentPage === pageAmt - 1);\n\n    return (\n      <nav className=\"fs-search-pager\" role=\"navigation\" aria-labelledby=\"fs-pagination-heading\">\n        <h4 id=\"fs-pagination-heading\" className=\"fs-element-invisible\">Pagination</h4>\n        <ul className=\"fs-search-pager__items js-fs-search-pager__items\">\n          <li className={cx(\"fs-search-pager__item fs-search-pager__item--first\", {\"fs-element-invisible\": firstPageHidden})} key=\"start\">\n            <button className={cx(\"fs-search-pager__item-button fs-search-pager__item-button--first\")} tabIndex={firstPageHidden ? \"-1\" : \"0\"} onClick={this.onPageChange.bind(this, 0)} onKeyPress={ this.buildHandleEnterKeyPress(this.onPageChange.bind(this, 0)) } title=\"Go to first page\">\n              <span className=\"fs-element-invisible\">First page</span>\n              <span aria-hidden={firstPageHidden ? \"true\" : \"false\"}>\n                <DoubleChevronLeft/>\n              </span>\n            </button>\n          </li>\n          <li className={cx(\"fs-search-pager__item search-pager__item--previous\", {\"fs-element-invisible\": prevPageHidden})} key=\"prev\">\n            <button className={cx(\"fs-search-pager__item-button fs-search-pager__item-button--prev\")} tabIndex={prevPageHidden ? \"-1\" : \"0\"} onClick={this.onPageChange.bind(this, currentPage - 1)} onKeyPress={ this.buildHandleEnterKeyPress(this.onPageChange.bind(this, currentPage - 1)) }title=\"Go to previous page\" rel=\"previous\">\n              <span className=\"fs-element-invisible\">Previous page</span>\n              <span aria-hidden={prevPageHidden  ? \"true\" : \"false\"}>\n                <ChevronLeft/>\n              </span>\n            </button>\n          </li>\n          {pages.map((page, idx) => this.renderPage(page, currentPage, idx))}\n          <li className={cx(\"fs-search-pager__item fs-search-pager__item--next\", {\"fs-element-invisible\": nextPageHidden})} key=\"next\">\n            <button className={cx(\"fs-search-pager__item-button fs-search-pager__item-button--next\")} tabIndex={nextPageHidden ? \"-1\" : \"0\"} onClick={this.onPageChange.bind(this, currentPage + 1, pageAmt)} onKeyPress={ this.buildHandleEnterKeyPress(this.onPageChange.bind(this, currentPage + 1, pageAmt)) } title=\"Go to next page\" rel=\"next\">\n              <span className=\"fs-element-invisible\">Next page</span>\n              <span aria-hidden={nextPageHidden ? \"true\" : \"false\"}>\n                <ChevronRight/>\n              </span>\n            </button>\n          </li>\n          <li className={cx(\"fs-search-pager__item search-pager__item--last\", {\"fs-element-invisible\": lastPageHidden})} key=\"end\">\n            <button className={cx(\"fs-search-pager__item-button fs-search-pager__item-button--last\")} tabIndex={lastPageHidden ? \"-1\" : \"0\"} onClick={this.onPageChange.bind(this, pageAmt - 1)} onKeyPress={ this.buildHandleEnterKeyPress(this.onPageChange.bind(this, pageAmt - 1)) } title=\"Go to last page\">\n              <span className=\"fs-element-invisible\">Last page</span>\n              <span aria-hidden={lastPageHidden ? \"true\" : \"false\"}>\n                <DoubleChevronRight/>\n              </span>\n            </button>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nFederatedPagination.propTypes = {\n  onChange: PropTypes.func,\n  query: PropTypes.object,\n  results: PropTypes.object\n};\n\nexport default FederatedPagination;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { LiveMessage } from 'react-aria-live';\n\nfunction searchResultsStat(currentPage, numFound, rows, pageAmt, noResultsText, termValue) {\n  // Set visible and a11y message based on query results.\n  let message = '';\n  let a11yMessage = '';\n  if (numFound > rows) { // Many pages\n    a11yMessage = `Showing page ${currentPage + 1} of ${pageAmt} (${numFound} results).`;\n    message = (\n      <span>Showing page\n        <b> {currentPage + 1}</b> of\n        <b> {pageAmt}</b> (<b>{numFound}</b> results).\n      </span>\n    );\n  } else if (numFound <= rows && numFound > 1) { // Single page\n    a11yMessage = `Showing ${numFound} results.`;\n    message = (<span>Showing <b>{numFound}</b> results.</span>);\n  } else if (numFound === 1) { // Single item\n    a11yMessage = `Showing ${numFound} result.`;\n    message = (<span>Showing <b>{numFound}</b> result.</span>);\n  } else if (numFound === 0) { // No results\n    message = noResultsText || 'Sorry, your search yielded no results.';\n    a11yMessage = message;\n  }\n  // Don't announce total results when wildcard query sent on term clear.\n  a11yMessage = termValue ? a11yMessage : '';\n  return (\n    <React.Fragment>\n      <LiveMessage message={a11yMessage} aria-live=\"polite\" />\n      <p id=\"stat\" tabIndex=\"-1\" className=\"fs-search-results-stat\">{message}</p>\n    </React.Fragment>\n  );\n}\n\nclass FederatedCountLabel extends React.Component {\n  render() {\n    const {\n      numFound,\n      start,\n      rows,\n      noResultsText,\n      termValue,\n    } = this.props;\n    const currentPage = start / rows;\n    const pageAmt = Math.ceil(numFound / rows);\n    return (\n      <React.Fragment>\n        {searchResultsStat(currentPage, numFound, rows, pageAmt, noResultsText, termValue)}\n      </React.Fragment>\n    );\n  }\n}\n\nFederatedCountLabel.propTypes = {\n  numFound: PropTypes.number.isRequired,\n  start: PropTypes.number.isRequired,\n  rows: PropTypes.number,\n};\n\nFederatedCountLabel.defaultProps = {\n  start: 0,\n};\n\nexport default FederatedCountLabel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport queryString from 'query-string';\nimport moment from 'moment';\nimport { LiveMessenger } from 'react-aria-live';\nimport helpers from '../../helpers';\n\n\n// Create dumb component which can be configured by props.\nconst FacetType = props => (\n  <button className=\"fs-applied-filters__filter\" key={props.id} onClick={props.onClick}>\n    <span className=\"fs-element-invisible\">\n      Remove filter\n    </span>\n    {props.children}\n  </button>\n);\n\n// Configure and render the FacetType component to render as list facet type.\nclass ListFacetType extends React.Component {\n  removeListFacetValue(field, values, value) {\n    this.props.announcePolite(`Removed ${field.value} filter.`);\n\n    const {\n      foundIdx,\n      parsed,\n      isQsParamField,\n      param,\n    } = helpers.qs.getFieldQsInfo({\n      field,\n      values,\n      value,\n    });\n\n    // Confirm the field value is set in state.\n    if (foundIdx > -1) {\n      // If the field is one whose state is tracked in qs and there is currently a param for it.\n      if (isQsParamField && param) {\n        const newParsed = helpers.qs.removeValueFromQsParam({\n          field,\n          value,\n          param,\n          parsed,\n        });\n\n        helpers.qs.addNewUrlToBrowserHistory(newParsed);\n      }\n\n      // Send query based on new state.\n      this.props.onChange(field, values.filter((v, i) => i !== foundIdx));\n    }\n  }\n\n  render() {\n    const { searchField } = this.props;\n    return (searchField.value.map((val, i) => (\n      <FacetType\n        key={i}\n        id={i}\n        onClick={() => this.removeListFacetValue(searchField.field, searchField.value, val)}\n      >\n        {/* Add spacing to hierarchical facet values: Type>Term = Type > Term. */}\n        {val.replace('>', ' > ')}\n      </FacetType>\n    )));\n  }\n}\n\n// Configure and render the FacetType component to render as range facet type.\nclass RangeFacetType extends React.Component {\n  removeRangeFacetValue(field) {\n    this.props.announcePolite(`Removed ${field.value} filter.`);\n    this.props.onChange(field, []);\n  }\n\n  render() {\n    const { searchField } = this.props;\n    // Create a moment from the search start date.\n    const start = moment(searchField.value[0]);\n    // Use UTC.\n    start.utc();\n    // Create a formatted string from start date.\n    const startFormatted = start.format('MM/DD/YYYY');\n    // Create a moment from search end date.\n    const end = moment(searchField.value[1]);\n    // Use utc.\n    end.utc();\n    // Create a formatted string from end date.\n    const endFormatted = end.format('MM/DD/YYYY');\n    // Determine if we chose the same or different start / end dates.\n    const diff = start.diff(end, 'days');\n    // Only show the start date if the same date were chosen, otherwise: start - end.\n    const filterValue = diff ? `${startFormatted} - ${endFormatted}` : startFormatted;\n    return (\n      <FacetType onClick={() => this.removeRangeFacetValue(searchField.field)}>\n        {filterValue}\n      </FacetType>\n    );\n  }\n}\n\n// Configure and render the FacetType component to render as text facet type.\nclass TextFacetType extends React.Component {\n  removeTextValue(field) {\n    this.props.announcePolite(`Removed search term ${field.value}.`);\n    // Setting this to '' or \"\" throws a fatal error.\n    this.props.onChange(field, null);\n    // Get current querystring params.\n    const parsed = queryString.parse(window.location.search);\n    // Remove the search term param, if it exists.\n    if (parsed.search) {\n      delete parsed.search;\n    }\n    const stringified = queryString.stringify(parsed);\n    // Update the querystring params in the browser, add path to history.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method\n    if (window.history.pushState) {\n      if (stringified) {\n        const newurl = `${window.location.protocol}//${window.location.host}${window.location.pathname}?${stringified}`;\n        window.history.pushState({ path: newurl }, '', newurl);\n      } else {\n        const newurl = `${window.location.protocol}//${window.location.host}${window.location.pathname}`;\n        window.history.pushState({ path: newurl }, '', newurl);\n      }\n    } else {\n      window.location.search = stringified;\n    }\n  }\n\n  render() {\n    const { searchField } = this.props;\n    return (\n      <FacetType onClick={() => this.removeTextValue(searchField.field)}>\n        {searchField.value}\n      </FacetType>\n    );\n  }\n}\n\nclass FederatedCurrentQuery extends React.Component {\n  render() {\n    const { query } = this.props;\n\n    const fields = query.searchFields.filter(searchField => searchField.value\n      && searchField.value.length > 0);\n\n    // Create a map of known facet type child components which can be rendered dynamically.\n    const facetTypes = {\n      'list-facet': ListFacetType,\n      'range-facet': RangeFacetType,\n      text: TextFacetType,\n    };\n\n    return (\n      <LiveMessenger>\n        {({ announcePolite }) => (\n          <React.Fragment>\n            {fields.length > 0 && // Only render this if there are filters applied.\n              <div className=\"fs-applied-filters\">\n                <h2 className=\"fs-element-invisible\">\n                  Currently Applied Search Filters.\n                </h2>\n                <p className=\"fs-element-invisible\">\n                  Click a filter to remove it from your search query.\n                </p>\n                {/* Only render the values for visible facets / filters */}\n                {fields.filter(searchField => !searchField.isHidden).map((searchField, i) => {\n                  // Determine which child component to render.\n                  const MyFacetType = facetTypes[searchField.type];\n                  return (\n                    <MyFacetType\n                      {...this.props}\n                      key={i}\n                      searchField={searchField}\n                      announcePolite={announcePolite}\n                    />\n                  );\n                })}\n              </div>\n            }\n          </React.Fragment>\n        )}\n      </LiveMessenger>\n    );\n  }\n}\n\nFederatedCurrentQuery.propTypes = {\n  onChange: PropTypes.func,\n  query: PropTypes.object,\n};\n\nexport default FederatedCurrentQuery;\n","import PropTypes from 'prop-types';\nimport React from \"react\";\n\nclass FederatedSortMenu extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      sort: 'score'\n\t\t};\n    this.onSelect = this.onSelect.bind(this);\n\t}\n\n\tonSelect(event) {\n\t  this.setState({sort: event.target.value});\n\n\t  const sortField = event.target.value;\n\t\tconst foundIdx = this.props.sortFields.indexOf(sortField);\n\t\tif (foundIdx < 0) {\n\t\t\tthis.props.onChange(sortField, \"desc\");\n\t\t} else {\n\t\t\tthis.props.onChange(sortField, null);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { sortFields } = this.props;\n\t\tif (sortFields.length === 0) { return null; }\n\n\t\treturn (\n\t\t\t<div className=\"fs-search-scope\">\n        <div className=\"fs-search-scope__filter\">\n          <label className=\"fs-search-scope__label\" htmlFor=\"sort-by\">Sort By</label>\n          <select className=\"fs-search-scope__select\" id=\"sort-by\" name=\"sort-by\" onChange={this.onSelect} value={this.state.sort}>\n\t\t\t\t\t\t{sortFields.map((sortField, i) => (\n                <option value={sortField.field} key={i}>{sortField.label}</option>\n\t\t\t\t\t\t))}\n          </select>\n        </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nFederatedSortMenu.propTypes = {\n\tbootstrapCss: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tsortFields: PropTypes.array\n};\n\nexport default FederatedSortMenu;\n","// Create a custom component pack from the default component pack\nimport {defaultComponentPack} from \"../solr-faceted-search-react/src/index\";\nimport FederatedResult from \"./results/result\";\nimport FederatedTextSearch from \"./text-search/index\";\nimport FederatedListFacet from \"./list-facet/index\";\nimport FederatedRangeFacet from \"./range-facet/index\";\nimport FederatedSearchFieldContainer from \"./search-field-container\";\nimport FederatedResultList from \"./results/list\";\nimport FederatedPagination from \"./results/pagination\";\nimport FederatedCountLabel from \"./results/count-label\";\nimport FederatedCurrentQuery from \"./current-query\";\nimport FederatedSortMenu from \"./sort-menu\";\n\nconst FederatedSolrComponentPack = {\n  ...defaultComponentPack,\n  searchFields: {\n    ...defaultComponentPack.searchFields,\n    text: FederatedTextSearch,\n    \"list-facet\": FederatedListFacet,\n    \"range-facet\": FederatedRangeFacet,\n    container: FederatedSearchFieldContainer,\n    currentQuery: FederatedCurrentQuery\n  },\n  results: {\n    ...defaultComponentPack.results,\n    result: FederatedResult,\n    list: FederatedResultList,\n    paginate: FederatedPagination,\n    resultCount: FederatedCountLabel\n  },\n  sortFields: {\n    menu: FederatedSortMenu\n  }\n}\n\nexport default FederatedSolrComponentPack;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LiveAnnouncer } from 'react-aria-live';\nimport FederatedSolrComponentPack from './federated_solr_component_pack';\nimport helpers from '../helpers';\n//import componentPack from \"./component-pack\";\n\nconst getFacetValues = (type, results, field, lowerBound, upperBound) => {\n  return type === 'period-range-facet'\n    ? (results.facets[lowerBound] || []).concat(results.facets[upperBound] || [])\n    : type === 'list-facet' || type === 'range-facet'\n      ? results.facets[field] || []\n      : null;\n};\n\nclass FederatedSolrFacetedSearch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.resetFilters = this.resetFilters.bind(this);\n  }\n\n  resetFilters() {\n    let { query } = this.props;\n    let searchTerm = '';\n    // Keep only the value of the main search field.\n    for (const field of query.searchFields) {\n      if (field.field !== query.mainQueryField) {\n        // Remove the field value.\n        delete (field.value);\n        // Collapse the sidebar filter toggle.\n        field.collapse = true;\n        // Collapse the terms sidebar filter toggle.\n        if (Object.hasOwnProperty.call(field, 'expandedHierarchies')) {\n          field.expandedHierarchies = [];\n        }\n      } else {\n        // Extract the value of the main search term to use when setting new URL for this state.\n        searchTerm = field.value;\n      }\n    }\n    // Set new parsed params based on only search term value.\n    const parsed = {\n      search: searchTerm,\n    };\n    // Add new url to browser window history.\n    helpers.qs.addNewUrlToBrowserHistory(parsed);\n\n    // Update state to remove the filter field values.\n    this.setState({ query });\n    // Execute search.\n    this.props.onSearchFieldChange();\n  }\n\n  render() {\n    const {\n      customComponents,\n      bootstrapCss,\n      query,\n      results,\n      truncateFacetListsAt,\n      options,\n      onSearchFieldChange,\n      onTextInputChange,\n      onSortFieldChange,\n      onPageChange,\n    } = this.props;\n    const { searchFields, sortFields, rows } = query;\n    const start = query.start ? query.start : 0;\n    const SearchFieldContainerComponent = customComponents.searchFields.container;\n    const ResultContainerComponent = customComponents.results.container;\n    const ResultComponent = customComponents.results.result;\n    const ResultCount = customComponents.results.resultCount;\n    const ResultHeaderComponent = customComponents.results.header;\n    const ResultListComponent = customComponents.results.list;\n    const ResultPendingComponent = customComponents.results.pending;\n    const PaginateComponent = customComponents.results.paginate;\n    const PreloadComponent = customComponents.results.preloadIndicator;\n    const CurrentQueryComponent = customComponents.searchFields.currentQuery;\n    const SortComponent = customComponents.sortFields.menu;\n    const FederatedTextSearch = FederatedSolrComponentPack.searchFields.text;\n\n    const resultPending = results.pending\n      ? (<ResultPendingComponent bootstrapCss={bootstrapCss} />)\n      : null;\n\n    const pagination = query.pageStrategy === 'paginate' ?\n      <PaginateComponent {...this.props} bootstrapCss={bootstrapCss} onChange={onPageChange} /> :\n      null;\n\n    const preloadListItem = query.pageStrategy === 'cursor'\n    && results.docs.length < results.numFound\n      ? <PreloadComponent {...this.props} />\n      : null;\n\n    let pageTitle;\n    if (this.props.options.pageTitle != null) {\n      pageTitle = <h1>{this.props.options.pageTitle}</h1>;\n    }\n\n    return (\n      <LiveAnnouncer>\n        <div className=\"fs-container\">\n          <aside className=\"fs-aside\">\n            <SearchFieldContainerComponent\n              bootstrapCss={bootstrapCss}\n              onNewSearch={this.resetFilters}\n              resultsCount={this.props.results.numFound}\n            >\n              {/* Only render the visible facets / filters.\n                  Note: their values may still be used in the query, if they were pre-set. */}\n              {searchFields\n                .filter(searchField => this.props.sidebarFilters.indexOf(searchField.field) > -1\n                  && !searchField.isHidden)\n                .map((searchField, i) => {\n                  const {\n                    type,\n                    field,\n                    lowerBound,\n                    upperBound,\n                  } = searchField;\n                  const SearchComponent = customComponents.searchFields[type];\n                  const facets = getFacetValues(type, results, field, lowerBound, upperBound);\n\n                  return (\n                    <SearchComponent\n                      key={i}\n                      {...this.props}\n                      {...searchField}\n                      bootstrapCss={bootstrapCss}\n                      facets={facets}\n                      truncateFacetListsAt={truncateFacetListsAt}\n                      onChange={onSearchFieldChange}\n                    />\n                  );\n                })\n              }\n            </SearchFieldContainerComponent>\n          </aside>\n          <div className=\"fs-main\">\n            {pageTitle}\n            <div className=\"fs-search-form\" autoComplete=\"on\">\n              <FederatedTextSearch\n                {...this.props}\n                autocomplete={options.autocomplete}\n                field=\"tm_rendered_item\"\n                label=\"Enter search term:\"\n                onSuggest={onTextInputChange}\n                onChange={onSearchFieldChange}\n                value={searchFields.find(sf => sf.field === 'tm_rendered_item').value}\n              />\n              <CurrentQueryComponent\n                {...this.props}\n                onChange={onSearchFieldChange}\n              />\n              <SortComponent\n                bootstrapCss={bootstrapCss}\n                onChange={onSortFieldChange}\n                sortFields={sortFields}\n              />\n            </div>\n            <p className={(searchFields.find(sf => sf.field === 'tm_rendered_item').value || this.props.options.showEmptySearchResults) ? 'solr-search-results-container__prompt fs-element-invisible' : 'solr-search-results-container__prompt'}>{this.props.options.searchPrompt || 'Please enter a search term.'}</p>\n            <div className={(searchFields.find(sf => sf.field === 'tm_rendered_item').value || this.props.options.showEmptySearchResults) ? 'solr-search-results-container__wrapper' : 'solr-search-results-container__wrapper fs-element-invisible'}>\n              <ResultContainerComponent bootstrapCss={bootstrapCss}>\n                <ResultHeaderComponent bootstrapCss={bootstrapCss}>\n                  <ResultCount\n                    bootstrapCss={bootstrapCss}\n                    numFound={results.numFound}\n                    start={start}\n                    rows={rows}\n                    onChange={onPageChange}\n                    noResultsText={this.props.options.noResults || null}\n                    termValue={searchFields.find(sf => sf.field === 'tm_rendered_item').value}\n                  />\n                  {resultPending}\n                </ResultHeaderComponent>\n                <ResultListComponent bootstrapCss={bootstrapCss}>\n                  {results.docs.map((doc, i) => (\n                    <ResultComponent\n                      bootstrapCss={bootstrapCss}\n                      doc={doc}\n                      fields={searchFields}\n                      key={doc.id || i}\n                      onSelect={this.props.onSelectDoc}\n                      resultIndex={i}\n                      rows={rows}\n                      start={start}\n                      highlight={results.highlighting[doc.id]}\n                      hostname={this.props.options.hostname}\n                    />\n                  ))}\n                  {preloadListItem}\n                </ResultListComponent>\n                {pagination}\n              </ResultContainerComponent>\n            </div>\n          </div>\n        </div>\n      </LiveAnnouncer>\n    );\n  }\n}\n\nFederatedSolrFacetedSearch.defaultProps = {\n  bootstrapCss: true,\n  customComponents: FederatedSolrComponentPack,\n  pageStrategy: 'paginate',\n  rows: 20,\n  searchFields: [\n    {\n      type: 'text', field: '*',\n    },\n  ],\n  sortFields: [],\n  truncateFacetListsAt: -1,\n  showCsvExport: false,\n  sidebarFilters: ['sm_site_name', 'ss_federated_type', 'ds_federated_date', 'sm_federated_terms'],\n  options: {},\n};\n\nFederatedSolrFacetedSearch.propTypes = {\n  bootstrapCss: PropTypes.bool,\n  customComponents: PropTypes.object,\n  onCsvExport: PropTypes.func,\n  onNewSearch: PropTypes.func,\n  onPageChange: PropTypes.func,\n  onSearchFieldChange: PropTypes.func.isRequired,\n  onTextInputChange: PropTypes.func,\n  onSelectDoc: PropTypes.func,\n  onSortFieldChange: PropTypes.func.isRequired,\n  query: PropTypes.object,\n  results: PropTypes.object,\n  showCsvExport: PropTypes.bool,\n  truncateFacetListsAt: PropTypes.number,\n  options: PropTypes.object,\n};\n\nexport default FederatedSolrFacetedSearch;\n","// index.js\nimport 'babel-polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SolrClient } from './solr-faceted-search-react/src/index';\nimport FederatedSolrComponentPack from './components/federated_solr_component_pack';\nimport FederatedSolrFacetedSearch from './components/federated-solr-faceted-search';\nimport helpers from './helpers';\n\n// import search app boilerplate styles\nimport './styles.css';\n\n/**\n * Executes search query based on the value of URL querystring params.\n *\n * @param solrClient\n *   Instantiated solrClient.\n * @param options\n *   Config options, used to determine initial site search name\n */\nconst searchFromQuerystring = (solrClient, options = {}) => {\n  // Get existing querystring params.\n  const { parsed, params } = helpers.qs.getParsedQsAndParams();\n\n  let searchFieldsState = solrClient.state.query.searchFields;\n\n  // Set the state for searchFields based on qs params.\n  searchFieldsState.forEach((searchField) => {\n    // Get the field machine name for the main query field.\n    if (Object.prototype.hasOwnProperty.call(options,'mainQueryField') && searchField.field === options.mainQueryField) {\n      // Set the state of the main query field to the value of the search qs param\n      searchField.value = parsed.search;\n    }\n    // If the searchField is one for which we preserve state through qs.\n    if (helpers.filterFieldsWithQsState.find((filterField) => filterField === searchField.field )) {\n      searchField = helpers.qs.setFieldStateFromQs({\n        params,\n        searchField\n      }) // this resets our initial state of search sites\n    }\n    // If restricted to the current site by configuration, enforce it here.\n    // This rule only applies if site has not been selected by the user.\n    if (options.siteSearch !== undefined && searchField.field === 'sm_site_name' && searchField.value === undefined && searchField.isHidden === false) {\n      searchField.value = [options.siteSearch];\n    }\n  });\n  // Ensure the initial query succeeds by setting a default start value.\n  solrClient.state.query.start = solrClient.state.query.start || 0;\n  // Send query based on state derived from querystring.\n  solrClient.sendQuery(solrClient.state.query);\n};\n\n// Initialize the solr client + search app with settings.\nconst init = (settings) => {\n  const defaults = {\n    isD7: false,\n    // Whether or not we should be querying the solr backend directly.\n    proxyIsDisabled: false,\n    // The query request endpoint url must be assigned in ./.env.local.js and by the search app settings in the module.\n    url: \"\",\n    // The search fields and filterable facets.\n    searchFields: [\n      {label: \"Enter Search Term:\", field: \"tm_rendered_item\", type: \"text\", isHidden: false},\n      {label: \"Site Name\", field: \"sm_site_name\", type: \"list-facet\", collapse: true, isHidden: false},\n      {label: \"Type\", field: \"ss_federated_type\", type: \"list-facet\", collapse: true, isHidden: false},\n      {label: \"Date\", field: \"ds_federated_date\", type: \"range-facet\", collapse: true, isHidden: false},\n      {label: \"Federated Terms\", field: \"sm_federated_terms\", type: \"list-facet\", hierarchy: true, expandedHierarchies: [], isHidden: false},\n    ],\n    // The solr field to use as the source for the main query param \"q\".\n    mainQueryField: \"tm_rendered_item\",\n    sortFields: [\n      {label: \"Relevance\", field: \"score\"},\n      {label: \"Date\", field: \"ds_federated_date\"}\n    ],\n    // Enable highlighting in search results snippets.\n    hl: {\n      fl: 'tm_rendered_item', // the highlight snippet source field(s)\n      usePhraseHighlighter: true // highlight phrase queries\n    },\n    pageStrategy: \"paginate\",\n    rows: 20,\n    // Hostname overridable in ./.env.local.js for testing purposes.\n    hostname: window.location.hostname,\n    autocomplete: false,\n  };\n\n  const options = Object.assign(defaults, settings);\n\n  // Update searchFields to indicate which facets or filters should be hidden in the UI.\n  // Note: these facets and filters may still be used in the query.\n  settings.hiddenSearchFields = settings.hiddenSearchFields || [];\n  options.searchFields = options.searchFields.map(searchField => {\n    if (settings.hiddenSearchFields.includes(searchField.field)) {\n      searchField.isHidden = true;\n    }\n    return searchField;\n  });\n\n  // Set sm_site_name default values from config\n  const sm_site_name_value = settings.sm_site_name || false;\n\n  // Logic for restricting site search based on config.\n  options.siteList = [];\n  if (settings.siteSearch !== undefined) {\n    options.searchFields.forEach((searchField) => {\n      if (searchField.field === 'sm_site_name' &&\n        (searchField.isHidden || sm_site_name_value.length < 2)) {\n        options.siteList = [settings.siteSearch];\n      }\n    });\n  }\n  else {\n    options.siteList = sm_site_name_value;\n  }\n\n  // The client class.\n  const solrClient = new SolrClient({\n    isD7: options.isD7,\n    proxyIsDisabled: options.proxyIsDisabled,\n    url: options.url,\n    userpass: options.userpass,\n    searchFields: options.searchFields,\n    sortFields: options.sortFields,\n    pageStrategy: options.pageStrategy,\n    rows: options.rows,\n    hl: options.hl,\n    mainQueryField: options.mainQueryField,\n    filters: [{field: \"sm_site_name\", type: \"list-facet\", value: options.siteList}],\n\n    // The change handler passes the current query- and result state for render\n    // as well as the default handlers for interaction with the search component\n    onChange: (state, handlers) =>\n      // Render the faceted search component\n      ReactDOM.render(\n        <FederatedSolrFacetedSearch\n          {...state}\n          {...handlers}\n          customComponents={FederatedSolrComponentPack}\n          bootstrapCss={false}\n          //onSelectDoc={(doc) => console.log(doc)}\n          onSelectDoc={()=>{}}\n          truncateFacetListsAt={-1}\n          options={options}\n        />,\n        document.getElementById(\"fs-root\")\n      )\n  });\n\n  // Check if there is a querystring param search term and make initial query.\n  searchFromQuerystring(solrClient, options);\n\n  // Listen for browser history changes / updated querystring, make new query.\n  // See https://developer.mozilla.org/en-US/docs/Web/Events/popstate\n  window.onpopstate = function() {\n    searchFromQuerystring(solrClient, options);\n  };\n};\n\n// If we are in the production environment (i.e. using the build compiled js)\n// @see https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-custom-environment-variables\nif (process.env.NODE_ENV === 'production') {\n  // Get the root element where the app will be rendered.\n  const root = document.getElementById(\"fs-root\");\n\n  if (root) {\n    // Get the data attribute which has the stringified configuration data json object.\n    if (Object.hasOwnProperty.call(root.dataset, 'federatedSearchAppConfig')) {\n      const settings = JSON.parse(root.dataset.federatedSearchAppConfig);\n      init(settings);\n    }\n    else {\n      console.error('Federated Search React | Could not find a data-federated-search-app-config attribute on div#fs-root.  Please populate data-federated-search-app-config with search app configuration data.');\n    }\n  }\n  else {\n    console.error('Federated Search React | Could not find div#fs-root in which to load the search app.');\n  }\n}\n// This is not production (i.e. not using the build compiled js)\nelse {\n  // Get the local environment settings for the search app and initialize.\n  import('./.env.local.js')\n    .then(\n      (settings) => {\n        init(settings); // Load the app, passing in the ./.env.local.js config.\n      },\n      (error) => {\n        console.error('Federated Search React | Could not load local configuration for search app: ', error);\n      }\n    );\n}\n"],"sourceRoot":""}