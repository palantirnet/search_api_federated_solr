<?php

/**
 * @file search_api_federated_solr.module
 * Contains hook implementations for the Federated Solr Search API Module.
 *
 * @copyright Copyright (c) 2018-19 Palantir.net
 */

/**
 * Implements hook_help().
 */
function search_api_federated_solr_help($path, $arg) {
  switch ($path) {
    // Main module help for the search_api_federated_solr module.
    case 'admin/help#search_api_federated_solr':
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('Allows indexing into a single Solr search index.') . '</p>';
    return $output;
  }
}

/**
 * Implements hook_menu().
 */
function search_api_federated_solr_menu() {
  $search_path = variable_get('search_api_federated_solr_path', 'search-app');

  $items[$search_path] = array(
    'title' => 'Search',
    'page callback' => 'page_search_api_federated_solr',
    'access arguments' => array('use federated search'),
  );

  $items['admin/config/search/federated-search-settings'] = array(
    'title' => 'Federated Search App',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_api_federated_solr_admin'),
    'access arguments' => array('administer federated search'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'search_api_federated_solr.admin.inc',
   );

  $items['search-api-federated-solr/search'] = array(
    'title' => 'Federated Search App',
    'page callback' => 'search_api_federated_solr_proxy',
    'access arguments' => array('use federated search'),
    'type' => MENU_CALLBACK,
    'file' => 'search_api_federated_solr.proxy.inc',
   );

  return $items;
}

/**
 * Implements hook_search_api_alter_callback_info().
 */
function search_api_federated_solr_search_api_alter_callback_info() {
  $callbacks['site_name'] = array(
    'name' => t('Site Name'),
    'description' => t('The name of the site from which this content originated. This can be useful if indexing multiple sites with a single search index.'),
    'class' => 'SearchApiFederatedSolrSiteName',
  );
  $callbacks['search_api_urls'] = array(
    'name' => t('URLs'),
    'description' => t('The links to the node on all available sites. This can be useful if indexing multiple sites with a single search index.'),
    'class' => 'SearchApiFederatedSolrUrls',
  );
  $callbacks['federated_field'] = array(
    'name' => t('Federated Field'),
    'description' => t('A token or free text field that can be customized per-bundle.'),
    'class' => 'SearchApiFederatedSolrField',
  );
  $callbacks['federated_terms'] = array(
    'name' => t('Federated Term'),
    'description' => t('By adding this field to your search index configuration, you have enabled the federated terms processor to run when new items are indexed.  Next, add a "Federated Terms" field to any taxonomy vocabulary whose terms should be mapped to a "federated" term (this helps map terms across vocabularies and sites to a single "federated" term).  Then, edit terms in those vocabularies to add the federated term destination value (i.e. "Conditions>Blood Disorders").  Once that tagged content gets indexed, it will have "federated_terms" populated with any matching federated term destination values.'),
    'class' => 'SearchApiFederatedSolrTerms',
  );
  $callbacks['remap'] = array(
    'name' => t('Re-map Field Names'),
    'description' => t(''),
    'class' => 'SearchApiFederatedSolrRemap',
  );

  return $callbacks;
}

/**
* Constructs the search page.
*/
function page_search_api_federated_solr() {
  $data_federated_search_app_config = search_api_federated_solr_config_json();
  $element = [];
  $element['#markup'] = '<div id="root" data-federated-search-app-config="'.htmlspecialchars($data_federated_search_app_config).'"><noscript>This search page requires Javascript in order to function.  <a href="https://www.whatismybrowser.com/guides/how-to-enable-javascript/auto">Learn how to enable Javascript in your browser.</a></noscript><p class="element-invisible" aria-hidden="true">Federated Solr Search App: If you see this message in your DevTools, it likely means there is an issue adding the app javascript library to this page.  Follow the steps in the search_api_federated_solr module README.</p></div>';
  $element['#attached']['library'][] = ['search_api_federated_solr', 'search-app'];

  return $element;
}


/**
 * Implements hook_block_info().
 */
function search_api_federated_solr_block_info() {
  $blocks['federated_search_page_form_block'] = array(
    'info' => t('Federated Search Page Form block'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function search_api_federated_solr_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'federated_search_page_form_block':
      $block['title'] = 'Federated Search Page Form block';
      $srchblk = drupal_get_form('search_api_federated_solr_search_block_form');
      $block['content'] = drupal_render($srchblk);
      break;
  }
  return $block;
}

/**
 * Create custom search form.
 */
function search_api_federated_solr_search_block_form($form, &$form_state) {
  $form['q'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#size' => 15,
    '#default_value' => '',
    '#attributes' => array(
      'title' => t('Enter the terms you wish to search for.'),
      'placeholder' => '',
    ),
    '#prefix' => '<div class="container-inline">',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#name' => '',
    '#suffix' => '</div>',
  );


  return $form;
}

/**
 * Create custom search form handler.
 */
function search_api_federated_solr_search_block_form_submit($form, &$form_state) {
  $search_path = variable_get('search_api_federated_solr_path', 'search-app');
  // Define default search app qs params (i.e. search term).
  $qs_params = [
    'search' => $form_state['values']['q'],
  ];

  // If there is a site name and it should be set by default, add it as qs param.
  $is_site_name_property = variable_get('search_api_federated_solr_has_site_name_property');
  $set_default_site = variable_get('search_api_federated_solr_set_search_site');
  if ($is_site_name_property == 'true' && $set_default_site) {

    $search_index = variable_get('search_api_federated_solr_search_index');
    // Get the index configuration object.
    $index = search_api_index_load($search_index);
    // Get the domain machine name from Domain Access.
    if (function_exists('domain_get_domain')) {
      $domain = domain_get_domain()['machine_name'];
    }

    // If the site is using Domain Access and there's an altered site name.
    if (isset($domain) && !empty($index->options['data_alter_callbacks']['site_name']['settings']['domain'][$domain])) {
      // Lookup the altered site name matching the domain and set it.
      $domain_site_name = $index->options['data_alter_callbacks']['site_name']['settings']['domain'][$domain];
      $qs_params['sm_site_name'] = $domain_site_name;
    }
    // If no Domain Access, again, check for an altered Site Name.
    elseif (!empty($index->options['data_alter_callbacks']['site_name']['settings']['site_name'])) {
      $site_name = $index->options['data_alter_callbacks']['site_name']['settings']['site_name'];
      $qs_params['sm_site_name'] = $site_name;
    }
    // If all else fails, use the site default.
    else {
      $qs_params['sm_site_name'] = variable_get('site_name');
    }
  }

  // Redirect to the search app path with necessary qs params.
  drupal_goto($search_path, ['query'=> $qs_params]);
}

/**
 * Create search_api_federated_solr_form_alter to validate the search path format.
 */

function search_api_federated_solr_form_search_api_federated_solr_admin_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_path_form_validate';
}

function _path_form_validate($form, &$form_state) {
     $form_state['values']['search_api_federated_solr_path'] = trim($form_state['values']['search_api_federated_solr_path'], '/');
}

/**
 * Ajax callback for search_api_federated_solr_search_index.
 */
function get_site_name($form, $form_state) {

  if (!empty($form_state['values']['search_api_federated_solr_search_index'])) {
    $search_index = $form_state['values']['search_api_federated_solr_search_index'];
    $index = search_api_index_load($search_index);
    $is_site_name_property = isset($index->options['fields']['site_name']) ? 'true' : '';
    $form['search_api_federated_solr_has_site_name_property']['#value'] = $is_site_name_property;
    $form_state['values']['search_api_federated_solr_has_site_name_property'] = $is_site_name_property;
  }

  return $form;
}


/**
 * Create search_api_federated_solr config json endpoint.
 */
function search_api_federated_solr_config_json() {
  $federated_search_app_config = [];

  $search_index = variable_get('search_api_federated_solr_search_index');
  // Get the index configuration object.
  $index = search_api_index_load($search_index);
  $server = search_api_server_load($index->server);
  $server_url = trim($server->getSolrConnection()->getBaseUrl(), '/');
  // Append the request handler.
  $server_url .= '/select';

  // REQUIRED: The default solr backend.
  $federated_search_app_config['url'] = $server_url;

  /* OPTIONAL:
   * The username and password for Basic Authentication on the server.
   * The username and password will be
   * combined and base64 encoded as per the application.
   */
  $basic_auth_username = variable_get('search_api_federated_solr_search_index_basic_auth_username');
  $basic_auth_password = variable_get('search_api_federated_solr_search_index_basic_auth_password');
  if ($basic_auth_username || $basic_auth_password) {
    $federated_search_app_config['userpass'] = base64_encode($basic_auth_username . ':' . $basic_auth_password);
  }

  // Create an index property field map array to determine which fields
  // exist on the index and should be hidden in the app UI.
  $search_fields = [
    "sm_site_name" => [
      "property" => variable_get('search_api_federated_solr_has_site_name_property', 1),
      "is_hidden" => variable_get('search_api_federated_solr_hide_site_name'),
    ],
    "ss_federated_type" => [
      "property" =>  variable_get('search_api_federated_solr_has_federated_type_property', 1),
      "is_hidden" => variable_get('search_api_federated_solr_hide_type'),
    ],
    "ds_federated_date" => [
      "property" => variable_get('search_api_federated_solr_has_federated_date_property', 1),
      "is_hidden" => variable_get('search_api_federated_solr_hide_date'),
    ],
    "sm_federated_terms" => [
      "property" => variable_get('search_api_federated_solr_has_federated_terms_property', 1),
      "is_hidden" => variable_get('search_api_federated_solr_hide_terms'),
    ],
  ];

  // Set hiddenSearchFields to an array of keys of those $search_fields items
  // which both exist as an index property and are set to be hidden.

  // OPTIONAL: Machine name of those search fields whose facets/filter and
  // current values should be hidden in UI.
  $federated_search_app_config['hiddenSearchFields'] = array_keys(array_filter($search_fields, function ($value) {
    return $value['property'] && $value['is_hidden'];
  }));

  // OPTIONAL: The text to display when the app loads with no search term.
  $search_prompt = variable_get('search_api_federated_solr_search_prompt_text');
  if ($search_prompt) {
    $federated_search_app_config['searchPrompt'] = $search_prompt;
  }

  // OPTIONAL: The text to display when a search returns no results.
  $no_response = variable_get('search_api_federated_solr_no_results_text');
  if ($no_response) {
    $federated_search_app_config['noResults'] = $no_response;
  }

  // OPTIONAL: The text to display when a search returns no results.
  $show_empty_search_results = variable_get('search_api_federated_solr_show_empty_search_results');
  if ($show_empty_search_results) {
    $federated_search_app_config['showEmptySearchResults'] = $show_empty_search_results;
  }

  // OPTIONAL: The number of search results to show per page.
  $rows = variable_get('search_api_federated_solr_rows');
  if ($rows) {
    $federated_search_app_config['rows'] = $rows;
  }

  // OPTIONAL: The number of page buttons to show for pagination.
  $pagination_buttons = variable_get('search_api_federated_solr_page_buttons');
  if ($pagination_buttons) {
    $federated_search_app_config['paginationButtons'] = $pagination_buttons;
  }

  /** Not implemented yet in D7.
  // OPTIONAL: The rendered title of the search page.
  if ($page_title = $config->get('page_title')) {
    $federated_search_app_config['pageTitle'] = $page_title;
  }*/

  $federated_search_app_config['autocomplete'] = FALSE;
  if ($autocomplete_is_enabled = variable_get('search_api_federated_solr_autocomplete_is_enabled')) {
    // REQUIRED: Autocomplete endpoint, defaults to main search url
    if ($autocomplete_url = variable_get('search_api_federated_solr_autocomplete_url')) {
      $federated_search_app_config['autocomplete']['url'] = $autocomplete_url;
    }
    // OPTIONAL: defaults to false, whether or not to append wildcard to query term
    if ($autocomplete_append_wildcard = variable_get('search_api_federated_solr_autocomplete_is_append_wildcard')) {
      $federated_search_app_config['autocomplete']['appendWildcard'] = $autocomplete_append_wildcard;
    }
    // OPTIONAL: defaults to 5, max number of autocomplete results to return
    if ($autocomplete_suggestion_rows = variable_get('search_api_federated_solr_autocomplete_suggestion_rows')) {
      $federated_search_app_config['autocomplete']['suggestionRows'] = $autocomplete_suggestion_rows;
    }
    // OPTIONAL: defaults to 2, number of characters *after* which autocomplete results should appear
    if ($autocomplete_num_chars = variable_get('search_api_federated_solr_autocomplete_num_chars')) {
      $federated_search_app_config['autocomplete']['numChars'] = $autocomplete_num_chars;
    }
    // REQUIRED: show search-as-you-type results ('result', default) or search term ('term') suggestions
    if ($autocomplete_mode = variable_get('search_api_federated_solr_autocomplete_mode')) {
      $federated_search_app_config['autocomplete']['mode'] = $autocomplete_mode;
      // OPTIONAL: default set, title to render above autocomplete results
      if ($autocomplete_mode_title_text = variable_get('search_api_federated_solr_autocomplete_' . $autocomplete_mode . '_title_text')) {
        $federated_search_app_config['autocomplete'][$autocomplete_mode]['titleText'] = $autocomplete_mode_title_text;
      }
      // OPTIONAL: defaults to false, whether or not to hide the keyboard usage directions text
      if ($autocomplete_mode_hide_directions = variable_get('search_api_federated_solr_autocomplete_' . $autocomplete_mode . '_hide_directions_text')) {
        $federated_search_app_config['autocomplete'][$autocomplete_mode]['showDirectionsText'] = FALSE;
      }
    }
  }

  if (function_exists('domain_get_domain')) {
    $domain = domain_get_domain();
    if (isset($domain['path'])) {
      $federated_search_app_config['hostname'] =  parse_url($domain['path'], PHP_URL_HOST) ;
    }
  }

  return json_encode($federated_search_app_config, JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK);
}

/**
 * Implements hook_field_info().
 */
function search_api_federated_solr_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'federated_terms' => array(
      'label' => t('Federated terms'),
      'description' => t('Stores the solr search api federated term destination value for taxonomy terms.'),
      'settings' => array('max_length' => 255),
      'default_widget' => 'federated_terms_textfield',
      'default_formatter' => 'string',
      'cardinality' => -1,
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function search_api_federated_solr_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      if (!empty($field['settings']['max_length']) && drupal_strlen($item['value']) > $field['settings']['max_length']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'federated_field_max_length',
          'message' => t('%name: may not be longer than @max characters.', array(
            '%name' => $instance['label'],
            '%max' => $field['settings']['max_length'],
          )),
        );
      }
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function search_api_federated_solr_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'federated_field_max_length':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_is_empty().
 */
function search_api_federated_solr_field_is_empty($item, $field) {
  return $item['value'] === NULL || $item['value'] === '';
}

/**
 * Implements hook_field_widget_info().
 */
function search_api_federated_solr_field_widget_info() {
  return array(
    'federated_terms_textfield' => array(
      'label' => t('Federated Terms Textfield'),
      'field types' => array('federated_terms'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function search_api_federated_solr_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL;

  $widget = $element;
  $widget['#delta'] = $delta;

  if ($instance['widget']['type'] == 'federated_terms_textfield') {
    $widget += array(
      '#type' => 'textfield',
      '#default_value' => $value,
      '#description' => t('This federated term is used as a facet value in your search application.  It should consist of a hierarchy made up of a type (i.e. "Condition") and term (i.e. "Diabetes"), separated by ">".  For example: Condition>Diabetes.'),
      '#size' => 75,
      '#maxlength' => 255,
      '#attributes' => ['class' => ['js-text-full', 'text-full']],
    );
  }

  $element['value'] = $widget;
  return $element;
}

/**
 * Declare search app static assets as module library.
 */
function search_api_federated_solr_library() {
  // Search app.
  $libraries['search-app'] = array(
    'title' => 'Federated Search App',
    'version' => variable_get('css_js_query_string', '0'),
    'js' => array(
      'https://cdn.jsdelivr.net/gh/palantirnet/federated-search-react@v2.0/js/main.6a547bbe.js' => array(
        'type' => 'external',
        'scope' => 'footer',
      ),
    ),
    'css' => array(
      'https://cdn.jsdelivr.net/gh/palantirnet/federated-search-react@v2.0/css/main.ec684809.css' => array(
        'type' => 'external',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_permission().
 */
function search_api_federated_solr_permission() {
  return array(
    'administer federated search' => array(
      'title' => t('Administer Federated Search'),
      'description' => t('Update Federated Search page configuration.'),
    ),
    'use federated search' => array(
      'title' => t('Use Federated Search'),
      'description' => t('Allows users to view and use the Federated Search page.'),
    ),
  );
}

/**
 * Implements hook_image_default_styles().
 */
function search_api_federated_solr_image_default_styles() {
  $styles = array();
  $styles['search_api_federated_solr_image'] = array(
    'label' => 'Federated Image',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 425,
          'height' => 239,
        ),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}
